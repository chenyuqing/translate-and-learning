0
00:00:00,100 --> 00:00:04,840
嘿 大家好 欢迎回来 这周 我们将讨论一些与以往不同的内容

1
00:00:05,000 --> 00:00:16,750
大多数时候，我们会讨论构建机器学习驱动产品的具体技术方面，但本周，我们将重点关注一些组织方面的事情，你需要做这些事情才能一起工作

2
00:00:16,880 --> 00:00:19,820
机器学习驱动的产品。是一个跨学科团队的成员。

3
00:00:20,210 --> 00:00:20,270
所以

4
00:00:20,360 --> 00:00:26,110
构建机器学习驱动的产品的现实是，构建任何产品都非常困难。

5
00:00:26,270 --> 00:00:28,450
你必须弄清楚如何雇佣优秀的人才

6
00:00:28,450 --> 00:00:32,090
你需要能够管理这些人 让他们发挥最大的作用

7
00:00:32,530 --> 00:00:36,950
你需要确保你的团队都在为一个共同的目标而努力

8
00:00:37,110 --> 00:00:41,950
你需要做出好的长期技术选择 随着时间的推移管理技术债务

9
00:00:42,100 --> 00:00:48,180
你需要确保你的管理期望 不仅是你自己的团队 还有你的组织的领导

10
00:00:48,600 --> 00:00:57,600
你需要能够确保你在组织其他部门的要求范围内工作得很好你很好地理解了这些要求

11
00:00:57,600 --> 00:01:02,500
并根据这些需求将你的进展反馈给组织的其他成员。

12
00:01:02,910 --> 00:01:06,950
但是机器学习给这个问题增加了更多的复杂性

13
00:01:07,290 --> 00:01:11,150
机器学习人才往往非常稀缺 吸引人才的成本也很高

14
00:01:11,330 --> 00:01:20,670
机器学习团队不仅仅是一个单一的角色，但今天，他们往往是跨学科的，这使得管理他们成为一个更大的挑战。

15
00:01:20,830 --> 00:01:27,570
机器学习项目通常有不明确的时间表 而且这些时间表存在高度的不确定性

16
00:01:27,860 --> 00:01:35,420
机器学习本身发展得非常快 机器学习 正如我们之前提到的 你可以把它想象成高利率的技术债务信用卡

17
00:01:35,580 --> 00:01:49,580
因此，在ml中，要做出好的长期决策并且不产生太多的技术债务是特别困难的。与传统软件不同，ml是如此的新，以至于在大多数组织中，领导层往往没有受过良好的教育。

18
00:01:49,840 --> 00:01:54,700
他们可能不理解机器学习和您正在使用的其他技术之间的一些核心差异

19
00:01:54,800 --> 00:01:59,700
机器学习产品往往会以外行人很难理解的方式失败，

20
00:01:59,700 --> 00:02:10,700
因此，这使得帮助组织中的其他利益相关者了解他们对您正在构建的这项技术的真正期望以及我们实现的现实目标变得非常困难。

21
00:02:10,870 --> 00:02:20,260
所以在这节课剩下的时间里，我们会接触到其中的一些主题，并涵盖这个问题的不同方面，作为一个组织，共同构建机器学习驱动的产品。

22
00:02:20,560 --> 00:02:21,680
这是我们要讲的部分

23
00:02:21,840 --> 00:02:25,200
我们将讨论构建机器学习产品所涉及的不同角色

24
00:02:25,360 --> 00:02:30,930
我们将讨论雇佣机器学习人才所涉及的一些独特方面

25
00:02:31,090 --> 00:02:39,170
我们将讨论团队的组织，ml团队如何融入组织的其他部分，以及不同的组织方式的优缺点。

26
00:02:39,450 --> 00:02:43,470
我们将讨论管理ml团队和ml产品管理

27
00:02:43,630 --> 00:02:52,350
最后，我们将讨论一些关于如何设计一个非常适合拥有良好ml模型的产品的设计考虑。

28
00:02:52,510 --> 00:02:54,090
所以让我们开始讨论规则吧

29
00:02:54,510 --> 00:03:07,750
你可能听说过的最常见的ML规则是ML产品经理、ML运维、ML平台、ML信息团队、机器学习工程师、机器学习研究人员、ML科学家、数据科学家。

30
00:03:07,910 --> 00:03:13,100
这里有很多不同的角色 一个很明显的问题是 这些不同的角色有什么区别

31
00:03:13,260 --> 00:03:21,090
因此 让我们分解这些角色在构建机器学习产品的背景下扮演的工作功能 从机器学习产品经理开始

32
00:03:21,350 --> 00:03:32,650
他们的目标是与机器学习团队 业务团队 用户和任何其他利益相关者合作 确定项目的优先级 并确保它们得到很好的执行 以满足组织其他部门的需求

33
00:03:32,700 --> 00:03:38,580
所以他们制作的是设计文档、线框图和工作计划。

34
00:03:38,620 --> 00:03:44,700
他们使用像Jira和Notion这样的工具来帮助组织团队其他成员的工作。

35
00:03:44,860 --> 00:03:58,030
ml ops或ml平台团队专注于构建所需的基础设施，以便使模型更容易部署，更具可扩展性，或者通常减少处理不同ml模型的个人贡献者的工作量。

36
00:03:58,190 --> 00:04:04,320
他们构建的输出是一些基础设施 一些可以在你公司的机器学习团队中使用的共享工具

37
00:04:04,400 --> 00:04:17,100
他们正在与aws、Kafka或其他数据基础设施工具等工具合作，并可能与机器学习基础设施供应商合作，从传统数据和软件工具中获得最好的产品

38
00:04:17,100 --> 00:04:27,000
和ML供应商提供的新类别，比如ML ops工具，一起为你的公司试图解决的特定问题创建最佳解决方案。

39
00:04:27,160 --> 00:04:28,280
然后是机器学习工程师

40
00:04:28,440 --> 00:04:42,040
机器学习工程师是一个包罗万象的角色，我认为他们的职责是负责培训、部署和维护预测模型，为机器学习功能产品提供动力。

41
00:04:42,200 --> 00:04:50,660
你知道 他们不仅仅是训练模型然后把它交给别人的人 而且他们还负责部署它 然后在生产中维护它

42
00:04:51,040 --> 00:04:59,330
因此，他们需要了解训练模型的tensorflow等技术，也需要了解打包模型的docker，并确保它们在生产基础设施上运行。

43
00:04:59,710 --> 00:05:01,530
下一个角色是机器学习研究员

44
00:05:01,500 --> 00:05:12,500
这是一个存在于一些组织中的角色，在模型被训练后，责任就停止了，所以通常这些模型要么被移交给其他团队进行生产，

45
00:05:12,500 --> 00:05:18,300
或者这些人专注于构建还不是生产关键或前瞻性的模型。

46
00:05:18,500 --> 00:05:23,000
也许他们正在对一些可能对组织有用的用例进行原型设计。

47
00:05:23,230 --> 00:05:32,620
他们的工作产品是一个经过训练的模型，通常它是一个报告或代码库，描述了这个模型的功能，如何使用它以及如何重现他们的结果。

48
00:05:32,960 --> 00:05:40,130
因此，他们正在使用ml交易工具，以及像jupyter notebook这样的原型工具，来生产一个只需工作的模型版本。

49
00:05:40,290 --> 00:05:43,470
一次是为了证明他们想要做的事情是可能的。

50
00:05:43,810 --> 00:05:45,550
最后是数据科学家

51
00:05:45,730 --> 00:05:50,610
数据科学家可能是上述任何一种情况的统称。

52
00:05:50,770 --> 00:05:56,610
在一些组织中，数据科学与我们在课堂上一直认为的机器学习角色截然不同。

53
00:05:56,770 --> 00:06:02,550
这些人在一些组织中负责使用分析来回答业务问题

54
00:06:02,590 --> 00:06:08,200
所以在一些组织中 数据科学家 你知道 和机器学习研究员或机器学习工程师是一样的

55
00:06:08,380 --> 00:06:14,220
在其他组织中 数据科学是一个独特的功能 负责使用数据回答业务问题

56
00:06:14,380 --> 00:06:16,920
机器学习工作是机器学习团队的责任

57
00:06:17,300 --> 00:06:21,860
接下来我们要讨论的是，要想在这些岗位上取得成功，你到底需要哪些不同的技能?

58
00:06:22,020 --> 00:06:23,340
我们要在2×2的平面上画出来

59
00:06:23,500 --> 00:06:29,510
X轴是你在机器学习中需要掌握的技能 比如你到底需要了解多少机器学习

60
00:06:29,670 --> 00:06:36,750
Y轴是所需的软件工程技能 然后气泡的大小是对沟通或技术写作的要求

61
00:06:36,910 --> 00:06:42,070
从ml ops或ml平台团队开始，你有多擅长与他人交流你的想法?

62
00:06:42,200 --> 00:06:52,700
这实际上主要是一个软件工程师的角色，通常这些人会通过传统的软件工程或数据工程招聘渠道进入组织，

63
00:06:52,700 --> 00:06:57,300
或者甚至从组织的另一个部门的数据工程角色转移过来。

64
00:06:57,600 --> 00:07:05,290
组织寻找机器学习运维或机器学习平台工程师的另一种常见模式是，他们从组织的机器学习主管那里招聘。

65
00:07:05,470 --> 00:07:13,910
这通常就像一个机器学习工程师曾经只在一个模型上工作，然后因为缺乏工具而感到沮丧，所以决定转向机器学习工程师更多的平台角色。

66
00:07:14,070 --> 00:07:19,260
因为这是一个需要深入理解模型并能够将其产品化的人

67
00:07:19,420 --> 00:07:23,080
这往往是机器学习技能和软件工程技能的罕见组合

68
00:07:23,380 --> 00:07:27,560
所以我通常认为人们成为机器学习工程师有两条路

69
00:07:27,560 --> 00:07:31,780
通常这些软件工程师都有相当多的自学经验。

70
00:07:31,900 --> 00:07:38,800
或者另一方面，也许他们是接受过机器学习传统训练的人，比如他们有科学或工程博士学位，

71
00:07:38,800 --> 00:07:46,100
但后来他们在研究生毕业或本科毕业后转投软件工程，后来决定融合这两种技能。

72
00:07:46,450 --> 00:07:48,450
机器学习研究人员。这些是你的机器学习专家。

73
00:07:48,610 --> 00:07:54,380
所以这是这个名单上唯一一个我认为很典型的仍然需要研究生学位的职位

74
00:07:54,500 --> 00:08:01,000
或者另一条通往这些职位的途径是这些工业奖学金项目，比如谷歌大脑实习，

75
00:08:01,000 --> 00:08:07,100
专门为没有博士学位的人提供这一独特研究技能的培训。

76
00:08:07,300 --> 00:08:13,400
由于数据科学有点像一个包罗万象的术语，涵盖了不同组织中的许多不同角色，

77
00:08:13,400 --> 00:08:20,700
它也接受各种不同背景的人，通常这些人都是参加过数据科学特定项目的本科生，

78
00:08:20,700 --> 00:08:24,300
或者他们的科学博士正在向工业界转型。

79
00:08:24,600 --> 00:08:29,800
最后是ml - pms。通常，这些人有传统的产品管理背景，

80
00:08:29,800 --> 00:08:34,500
但他们确实需要对机器学习开发过程的细节有深刻的理解，

81
00:08:34,500 --> 00:08:41,600
这可能来自与机器学习团队长期密切合作，对机器学习有非常强烈的独立兴趣。

82
00:08:41,900 --> 00:08:49,100
或者，我经常看到一些人，你知道，以前是数据科学家，或者机器学习工程师，他们变成了项目经理

83
00:08:49,100 --> 00:08:54,900
它在规划机器学习项目时非常有效，因为他们对技术有深刻的理解。

84
00:08:55,080 --> 00:09:04,770
在讨论各种不同的角色和机器学习组织时，我认为值得讨论的另一个区别是任务机器学习工程师和平台机器学习工程师之间的区别。

85
00:09:05,030 --> 00:09:10,130
这是Shrer Shankar在下面链接的博客文章中创造的一个区别。

86
00:09:10,520 --> 00:09:18,580
区别在于，一些机器学习工程师真正负责，比如，一个机器学习管道，或者他们被分配到的几个机器学习管道。

87
00:09:18,760 --> 00:09:27,880
所以他们是日复一日的人，负责确保这个模型是健康的，确保它经常更新，并且任何失败都是有原因的。

88
00:09:28,040 --> 00:09:30,170
这些人通常负担过重

89
00:09:30,330 --> 00:09:37,350
这可能是一个非常广泛的角色 因为他们必须训练模型并部署它们 并了解它们在哪里出错

90
00:09:37,500 --> 00:09:46,100
由于机器学习工程师通常分布得很分散，一些机器学习工程师最终承担的角色看起来更像是机器学习平台团队或机器学习运维团队。

91
00:09:46,100 --> 00:09:51,300
在那里，他们跨团队合作，帮助机器学习工程师自动化他们工作中繁琐的部分。

92
00:09:51,530 --> 00:10:01,330
所以在我们的术语中，这被称为ML平台工程师，或ML ops工程师，但你也会听到它被称为ML工程师，或平台ML工程师。

93
00:10:01,490 --> 00:10:06,490
刚才你谈到了在构建机器学习驱动产品的过程中不同的角色。

94
00:10:06,650 --> 00:10:10,550
现在我们来谈谈招聘 那么如何考虑雇佣机器学习专家呢

95
00:10:10,990 --> 00:10:16,570
如果你是一名正在找工作的机器学习专家，如何让自己成为一名更有吸引力的求职者。

96
00:10:16,730 --> 00:10:18,010
这里会讲到一些不同的东西

97
00:10:18,170 --> 00:10:22,590
第一个是人工智能人才缺口，这是当今招聘的现实。

98
00:10:22,830 --> 00:10:26,510
如果你正在招聘人员，我们将讨论如何寻找机器学习工程师。

99
00:10:26,670 --> 00:10:29,330
我们会谈到面试 最后 我们会谈到找工作

100
00:10:29,500 --> 00:10:35,500
四年前，当我们开始教授全栈深度学习时，人工智能人才缺口是很多情况下的主要问题，

101
00:10:35,500 --> 00:10:41,400
因为团队发现使用机器学习很难，因为理解这项技术的人太少了，

102
00:10:41,400 --> 00:10:47,600
阻碍很多组织发展的最大问题就是他们找不到擅长机器学习的人。

103
00:10:47,780 --> 00:10:57,580
四年后 人工智能人才缺口依然存在 你知道 每隔几个月就会有新的故事被写出来 讲述公司找到机器学习人才是多么困难

104
00:10:57,700 --> 00:11:03,500
但我每天在这个领域的观察是，它往往不像以前那样是一种阻碍，

105
00:11:03,500 --> 00:11:14,400
因为我们有四年的人将职业转向机器学习，四年的软件工程师从本科毕业，在许多情况下，他们至少上过几门机器学习课程。

106
00:11:14,700 --> 00:11:25,100
现在有越来越多的人有能力做机器学习，但仍然有一个差距，特别是，这个差距往往是在那些不仅仅了解底层技术的人身上，

107
00:11:25,100 --> 00:11:31,000
但也要有经验，看到它是如何失败的，以及如何在部署时使它成功。

108
00:11:31,240 --> 00:11:37,420
这就是今天招聘机器学习人员的困难 尤其是那些有生产经验的人

109
00:11:37,680 --> 00:11:41,420
所以 如果你正在招聘机器学习人员 你应该如何考虑找人呢

110
00:11:41,600 --> 00:11:51,200
如果你正在招聘机器学习产品经理、机器学习平台工程师或机器学习运维工程师，你需要寻找的主要技能仍然是这些角色的核心基础技能。

111
00:11:51,200 --> 00:11:55,200
比如产品管理，数据工程或者平台工程。

112
00:11:55,400 --> 00:12:01,100
但关键是要找到有经验的人，至少要与构建生产机器学习系统的团队互动，

113
00:12:01,100 --> 00:12:06,200
因为我认为我经常看到的一种失败模式，尤其是ML平台团队，

114
00:12:06,200 --> 00:12:16,400
如果你只引进纯软件共享背景的人，很多时候，他们很难很好地理解用户需求，从而设计出能够真正解决用户问题的产品。

115
00:12:16,650 --> 00:12:27,520
这里的用户是任务机器，他们将使用基础设施数据，我们将在本节的其余部分重点关注这两个角色，机器学习工程师和机器学习科学家。

116
00:12:27,770 --> 00:12:31,090
所以雇佣工程师有正确和错误的方式 也有错误的方式

117
00:12:31,250 --> 00:12:33,290
通常看起来是这样的。

118
00:12:33,450 --> 00:12:37,710
你可以看到独角兽机器学习工程师的职位描述

119
00:12:37,900 --> 00:12:41,060
这个人的职责是他们需要跟上最新的步伐。

120
00:12:41,220 --> 00:12:44,170
他们需要从头开始实现新模型

121
00:12:44,330 --> 00:12:51,170
他们需要对基础数学有深刻的理解 并有能力在新任务出现时发明新模型

122
00:12:51,330 --> 00:12:56,450
他们还需要能够在ML团队的每个结构中构建工具 因为ML团队需要工具来完成他们的工作

123
00:12:56,610 --> 00:13:00,490
他们还需要能够构建数据管道，因为没有数据ml什么都不是。

124
00:13:00,650 --> 00:13:06,490
他们需要部署这些模型 并在生产环境中监控它们 因为不部署模型 就不能真正解决问题

125
00:13:06,650 --> 00:13:12,610
因此，为了履行所有这些职责，作为独角兽机器学习角色，您需要这些要求。

126
00:13:12,770 --> 00:13:14,370
你当然需要博士学位

127
00:13:14,530 --> 00:13:18,770
你需要至少四年的tensorflow经验 四年的软件工程师经验

128
00:13:18,930 --> 00:13:25,730
你需要有出版物和指南或其他顶级ML会议，有构建大规模分布式系统的经验。

129
00:13:25,910 --> 00:13:31,130
所以当你把所有这些加起来 希望你能清楚为什么这是雇佣机器学习工程师的错误方式

130
00:13:31,390 --> 00:13:35,710
如果有的话 今天符合这一描述的人并不多

131
00:13:35,870 --> 00:13:43,150
因此，这意味着雇佣机器学习工程师的正确方法是非常非常具体地了解你真正需要这些人做什么。

132
00:13:43,310 --> 00:13:48,690
在大多数情况下 正确的答案是主要招聘软工程技能 而不是机器学习技能

133
00:13:49,000 --> 00:13:53,000
你确实需要至少有机器学习背景和学习机器学习的愿望的人，

134
00:13:53,000 --> 00:14:00,500
你可以教人们如何使用机器学习，如果他们对它有强烈的兴趣，他们知道基础知识，他们在软件工程方面非常强大。

135
00:14:00,790 --> 00:14:08,020
另一种方法 而不是招聘软件工程技能和培训机器学习方面的人员 是聘请更初级的人员

136
00:14:08,100 --> 00:14:11,700
如今，大多数计算机科学专业的本科生毕业时都有机器学习经验，

137
00:14:11,700 --> 00:14:16,000
这些人接受过传统的计算机科学训练，对机器学习有一定的理论理解，

138
00:14:16,000 --> 00:14:20,900
所以他们有同时擅长机器学习和软件工程的种子，

139
00:14:20,900 --> 00:14:23,200
但也许在这两方面都没有太多经验。

140
00:14:23,400 --> 00:14:29,200
第三种更有效的方法是更具体地说明你真正需要什么，

141
00:14:29,200 --> 00:14:32,600
不是一般的机器学习工程功能，而是这个特殊的角色。

142
00:14:32,800 --> 00:14:37,220
对吧?所以并不是每个ml工程师都需要成为开发专家才能获得成功。

143
00:14:37,630 --> 00:14:43,430
也不是每个机器学习工程师都需要能够从头开始实现新论文才能成功。

144
00:14:43,500 --> 00:14:45,800
在你招聘的许多年里，

145
00:14:45,800 --> 00:14:50,600
他们真正需要做的是采取一种模式，

146
00:14:50,600 --> 00:14:54,400
从货架上拿下来就能起作用，

147
00:14:54,400 --> 00:14:59,500
或者使用一个非常健壮的库来训练它，然后能够将该模型部署到生产环境中。

148
00:14:59,680 --> 00:15:05,780
所以 招聘的重点是那些拥有这些技能的人 而不是那些你的公司实际上并不需要的抱负技能

149
00:15:05,940 --> 00:15:09,700
接下来，让我们谈谈我发现的一些对于雇佣机器学习研究人员很重要的事情。

150
00:15:09,860 --> 00:15:17,240
第一个是 很多人 当他们雇佣机器学习研究人员时 他们首先看的是他们在顶级会议上发表的论文数量

151
00:15:17,310 --> 00:15:24,530
我认为完全关注出版物的质量而不是数量是至关重要的

152
00:15:24,690 --> 00:15:29,690
不幸的是 这需要对高质量的研究有一点判断

153
00:15:29,850 --> 00:15:32,890
但希望你的团队中有人能提供这样的判断

154
00:15:33,050 --> 00:15:41,170
对我来说，更有趣的是找到那些机器学习研究人员，你知道，有一两个你认为真正有创意的出版物

155
00:15:41,300 --> 00:15:46,000
或者非常适用于你所从事的领域，或者有非常非常强大、有希望的结果，

156
00:15:46,000 --> 00:15:52,500
然后去找一个发表了20篇论文的人，但每一篇都是对技术水平的一种渐进的改进。

157
00:15:52,700 --> 00:15:58,200
如果你在一家公司工作，你试图开发一种产品，你正在招聘研究人员，

158
00:15:58,200 --> 00:16:04,900
那么我认为另一件需要过滤的重要事情是寻找那些对真正重要的问题有眼光的研究人员。

159
00:16:05,100 --> 00:16:09,600
很多研究人员，也许不是他们自己的错，只是因为学术界的动机，

160
00:16:09,600 --> 00:16:13,700
如果其他人都在发表关于强化学习的文章，那么关注那些流行的问题，

161
00:16:13,700 --> 00:16:15,800
然后他们会发表关于强化学习的文章。

162
00:16:16,000 --> 00:16:18,300
如果其他人都在发表关于生成模型的文章，

163
00:16:18,300 --> 00:16:22,200
然后，他们将对生成模型进行增量改进，以使其发表。

164
00:16:22,390 --> 00:16:28,460
但我认为 你真正想要寻找的 是那些对什么问题是重要的问题有独立认识的人

165
00:16:28,620 --> 00:16:35,160
因为在你们公司的背景下 没有人会告诉这些人 比如 嘿 这是今年每个人都要发表的东西

166
00:16:35,210 --> 00:16:40,270
通常 学术界以外的经验可以很好地代表这一点 但这并不是必要的

167
00:16:40,330 --> 00:16:42,090
这只是一个信号

168
00:16:42,330 --> 00:16:51,370
如果你已经建立了一个研究团队，那么就值得考虑在Openai雇佣来自相邻领域的人才，物理学、统计学或数学领域的人才。

169
00:16:51,530 --> 00:16:53,370
他们这样做的效果非常好

170
00:16:53,530 --> 00:17:00,230
他们会寻找那些在技术上很有天赋 但没有太多ML专业知识的人 他们会对他们进行ML培训

171
00:17:00,400 --> 00:17:05,300
如果你有经验丰富的研究人员 他们可以为人们提供指导和指导 这种方法会好得多

172
00:17:05,520 --> 00:17:09,060
我可能不会雇佣一个没有ml经验的第一个研究员。

173
00:17:09,230 --> 00:17:14,690
同样值得记住的是 尤其是现在 你真的不需要博士学位来做机器学习研究

174
00:17:14,800 --> 00:17:21,800
许多本科生都有很多机器学习研究的经验，一些工业奖学金项目的毕业生，

175
00:17:21,800 --> 00:17:29,300
比如谷歌、facebook或Openai，无论他们是否拥有博士学位，都已经学会了如何进行研究的基本知识。

176
00:17:29,520 --> 00:17:34,540
这就是如何评估机器学习工程或机器学习研究职位的候选人。

177
00:17:34,710 --> 00:17:42,090
接下来我想说的是如何找到这些候选人，所以你的标准资源，比如领英、招聘人员或校园招聘，都是有效的。

178
00:17:42,200 --> 00:17:48,900
但如果你想深入研究，另一个非常有效的方法是，每当有新的档案文件堆积时，

179
00:17:48,900 --> 00:17:57,500
或者每年在nurips和其他顶级会议上，只要关注你认为最令人兴奋的论文，并标记这些论文的第一作者，

180
00:17:57,500 --> 00:18:05,500
因为这些人往往承担大部分工作，通常更容易被招聘，因为他们在职业生涯中往往更初级。

181
00:18:05,870 --> 00:18:11,530
除了看论文 你还可以做一些类似的事情来重新实现你喜欢的论文

182
00:18:11,600 --> 00:18:19,800
所以，如果你正在看一些热门的新论文，一周后，那篇论文的代码质量很高，并且达到了主要结果，

183
00:18:19,800 --> 00:18:25,700
那么很有可能编写该实现的人非常优秀，因此值得招聘。

184
00:18:25,900 --> 00:18:30,040
你可以亲自做很多事情 现在ml研究会议又回来了

185
00:18:30,300 --> 00:18:34,850
或者你可以直接联系那些你曾在网上联系过的人

186
00:18:35,010 --> 00:18:40,730
由于ML领域的人才短缺，仅仅知道如何找到优秀的ML候选人并对其进行评估是不够的。

187
00:18:40,890 --> 00:18:43,930
你还需要知道如何吸引他们加入你的公司

188
00:18:44,000 --> 00:18:46,600
我想谈谈，从我所看到的来看，

189
00:18:46,600 --> 00:18:53,900
很多ML从业者感兴趣的是什么，他们扮演的角色，然后讨论如何让你的公司在这些轴线上脱颖而出。

190
00:18:54,260 --> 00:19:00,740
因此 许多机器学习从业者想要的一件事是使用尖端的工具和技术 与最新的艺术研究合作

191
00:19:00,900 --> 00:19:05,700
另一件事是在一个令人兴奋的领域建立知识，比如ML的一个更令人兴奋的分支，

192
00:19:05,700 --> 00:19:11,100
或者对机器学习的应用，和优秀的人一起工作，可能在许多技术领域都很一致，

193
00:19:11,100 --> 00:19:14,000
但在机器学习中确实如此，处理有趣的数据集。

194
00:19:14,100 --> 00:19:18,600
这是机器学习中一个独特的东西，因为你可以做的工作在很多情况下是受限的，

195
00:19:18,600 --> 00:19:22,900
你可以访问的数据集，能够提供独特的数据集是非常强大的。

196
00:19:23,230 --> 00:19:30,220
也许这是真的 但我注意到 对于很多ML的人来说 让他们感觉自己在做真正重要的工作是很重要的

197
00:19:30,380 --> 00:19:31,940
那么如何在坐标轴上脱颖而出呢

198
00:19:32,100 --> 00:19:34,300
你可以从事研究型项目，

199
00:19:34,300 --> 00:19:40,400
即使你的团队的任务主要是帮助你的公司做一些可以宣传的研究工作，

200
00:19:40,400 --> 00:19:45,400
你可以指出这是在最前沿的开源库工作的指示。

201
00:19:45,580 --> 00:19:47,900
这样的事情确实有助于吸引优秀的候选人

202
00:19:48,060 --> 00:19:55,020
如果你想强调人们在一个令人兴奋的领域中积累技能和知识的能力 你可以围绕学习建立一种团队文化

203
00:19:55,180 --> 00:19:57,760
所以你可以在公司里举办读书会

204
00:19:57,780 --> 00:20:07,010
你可以组织学习日，这是我们在OpenAI做的事情，那时我们每周花一天时间，专注于学习新事物。

205
00:20:07,170 --> 00:20:08,910
但你可以做得更少

206
00:20:09,100 --> 00:20:12,100
专业开发预算，会议预算，诸如此类，

207
00:20:12,100 --> 00:20:20,500
你可以强调这一点，如果你的策略是雇佣更多资历较浅的人，或者更多面向软件工程的人，并对他们进行机器学习培训，这一点可能特别有价值。

208
00:20:20,690 --> 00:20:23,290
强调他们能从你公司的机器学习研究中学到多少。

209
00:20:23,450 --> 00:20:27,710
有一种方法可以提高优秀人才的水平，那就是在团队中加入其他优秀人才。

210
00:20:27,930 --> 00:20:34,530
这可能说起来容易做起来难，但一个真正引人注目的招聘可以帮助吸引该领域的许多其他人。

211
00:20:34,600 --> 00:20:38,600
如果你的团队中没有高知名度的人，

212
00:20:38,600 --> 00:20:43,700
你可以通过帮助你现有的团队发表博客和论文来提高他们的知名度，

213
00:20:43,700 --> 00:20:47,300
这样人们才会知道你的团队到底有多有才华。

214
00:20:47,530 --> 00:20:53,970
当你吸引ml候选人时，你可以在招聘材料中着重强调你数据集的独特性。

215
00:20:54,100 --> 00:20:59,300
所以，如果你有，你知道，法律领域或医学领域的一个特定子集的最佳数据集，

216
00:20:59,300 --> 00:21:04,500
强调你的工作有多有趣，你有多少数据，以及你拥有的数据有多独特。

217
00:21:04,600 --> 00:21:08,500
最后，就像其他类型的招聘销售一样，公司的使命，

218
00:21:08,500 --> 00:21:12,000
而机器学习对这一使命产生影响的潜力，是非常有效的。

219
00:21:12,080 --> 00:21:13,940
接下来 让我们谈谈ml面试

220
00:21:14,100 --> 00:21:18,800
如果你是ml面试的面试官，我建议你测试一下，

221
00:21:18,800 --> 00:21:26,700
就是尽量根据优势来招聘，其他方面都要达到最低标准，这可以帮助你避免陷入寻找独角兽的陷阱。

222
00:21:26,970 --> 00:21:31,290
所以你可以测试的是你想要验证你对候选人优势的假设

223
00:21:31,450 --> 00:21:35,930
所以如果是研究人员 你要确保他们能够创造性地思考新的机器学习问题

224
00:21:36,090 --> 00:21:39,970
你可以这样做的一个方法是调查他们对以前的项目有多考虑周到

225
00:21:40,100 --> 00:21:44,400
如果他们是工程师，如果他们是ml主管，那么你要确保他们是优秀的通用软件工程师，

226
00:21:44,400 --> 00:21:46,800
因为这是机器学习工程的核心技能。

227
00:21:47,010 --> 00:21:50,090
然后你要确保他们在较弱的领域达到最低标准

228
00:21:50,200 --> 00:21:58,400
因此，对于研究人员来说，我主张只雇用在行业背景下的研究人员，他们至少掌握了软件工程的基本知识

229
00:21:58,400 --> 00:22:03,700
写出像样的代码的能力，如果不是，你知道，真正高质量的，可以生产的代码。

230
00:22:03,900 --> 00:22:07,500
因为在与团队合作的情况下，其他人需要使用他们的代码，

231
00:22:07,500 --> 00:22:10,600
这并不是每个人在研究生院都能学会的。

232
00:22:10,820 --> 00:22:16,060
对于机器学习 对于软件工程师 你要确保他们至少满足机器学习知识的最低标准

233
00:22:16,200 --> 00:22:19,400
这真的是在测试他们是否对这个领域充满热情，

234
00:22:19,400 --> 00:22:25,600
他们已经付出了必要的努力来学习机器学习的基础知识，这是一个很好的迹象，表明他们将在工作中快速学习机器学习，

235
00:22:25,600 --> 00:22:28,500
如果你雇佣他们主要是为了其他软件工程技能。

236
00:22:28,660 --> 00:22:30,780
那么机器学习面试实际上包括哪些内容呢

237
00:22:30,940 --> 00:22:34,780
所以这是今天的情况 比你的软件工程面试定义得少得多

238
00:22:34,900 --> 00:22:40,100
我见过的一些常见的评估类型是普通的背景和文化契合度面试，

239
00:22:40,100 --> 00:22:45,700
白板编码，面试，类似于你在软件工程中看到的，结对编码，就像在软件工程中看到的。

240
00:22:45,870 --> 00:22:54,650
但是一些更具体的ML调试包括结对调试，你和面试官坐下来运行一些ML代码，试着找到，嘿，代码中的错误在哪里?

241
00:22:54,800 --> 00:23:00,700
通常这是ML特定的代码，目标是测试这个人在ML代码中发现bug的能力，

242
00:23:00,700 --> 00:23:08,300
由于漏洞往往是我们在机器学习、数学、谜题中花费大部分时间的地方，尤其是涉及线性代数之类的东西。

243
00:23:08,460 --> 00:23:12,900
把项目带回家 其他类型的评估包括应用ML问题

244
00:23:13,000 --> 00:23:20,500
所以这通常会有这样的感觉，嘿，这是一个我们试图用ML解决的问题让我们讨论一下我们如何解决它的高层次部分，

245
00:23:20,500 --> 00:23:24,000
我们使用什么样的算法，我们需要建立什么样的系统来支持它。

246
00:23:24,300 --> 00:23:30,300
另一种常见的评估是调查你在简历上列出的过去的项目，或者在面试过程中列出的项目。

247
00:23:30,300 --> 00:23:35,900
询问你尝试过的事情，什么成功了，什么失败了，并试图评估你在那个项目中扮演的角色，

248
00:23:35,900 --> 00:23:40,500
你有多彻底地考虑过你本可以考虑的不同路径。

249
00:23:40,660 --> 00:23:46,100
最后 机器学习理论问题也很常见 在这些面试类型评估中很常见

250
00:23:46,200 --> 00:23:51,500
如果你想招聘机器学习方面的人，你可能会考虑面试这些问题，

251
00:23:51,500 --> 00:23:57,800
或者你可能会在机器学习面试中发现，如果你站在另一边，试图面试其中一个工作，

252
00:23:57,800 --> 00:24:04,000
关于面试我们要说的最后一件事是Chip When有一本很棒的介绍机器学习面试的书，

253
00:24:04,000 --> 00:24:10,200
可以在网上免费获得，我认为这特别有用，如果你准备面试机器学习的职位，

254
00:24:10,200 --> 00:24:15,100
说到这一点，如果你的目标是在机器学习领域找到新工作，你还应该做些什么?

255
00:24:15,290 --> 00:24:19,210
我通常听到的第一个问题是 我应该去哪里找ML工作

256
00:24:19,370 --> 00:24:21,730
你的标准资源 比如linkedIn和招聘人员都有用

257
00:24:21,890 --> 00:24:24,370
机器学习研究会议也是一个很棒的地方

258
00:24:24,530 --> 00:24:27,730
走上去和那些站在展台周围的人谈谈

259
00:24:27,890 --> 00:24:29,870
他们倾向于寻找候选人

260
00:24:30,170 --> 00:24:32,090
你也可以直接申请

261
00:24:32,100 --> 00:24:35,400
这是人们告诉你在大多数角色中不要做的事情，但是记住，

262
00:24:35,400 --> 00:24:39,100
机器学习领域存在人才缺口，所以这实际上可能比你想象的更有效

263
00:24:39,100 --> 00:24:42,400
当你在申请这些职位的时候，你认为如何在这些职位中脱颖而出是最好的方法?

264
00:24:42,600 --> 00:24:50,500
所以我认为对于很多公司来说，他们很希望看到你对机器学习表现出某种兴趣，你参加过会议，

265
00:24:50,500 --> 00:24:56,500
你一直在上在线课程，你一直在做一些事情，为进入这个领域迈出一步。

266
00:24:56,740 --> 00:24:59,700
比这更好的是能够证明你有一些软件工程技能

267
00:24:59,860 --> 00:25:06,700
同样 对于许多机器学习组织来说 招聘软件工程师在很多方面比招聘机器学习技能更重要

268
00:25:07,000 --> 00:25:13,300
如果你能证明你对机器学习有深入的了解，那么写一篇综合某一特定研究领域的博客文章，

269
00:25:13,300 --> 00:25:20,300
或者用一种新颖的、有创意的、引人注目的方式来阐述一个特定的算法，这是一个很好的脱颖而出的方法。

270
00:25:20,500 --> 00:25:24,380
但比这更好的是展示你的能力，你知道，发布ml项目。

271
00:25:24,540 --> 00:25:30,600
我认为最好的方法是 如果你现在还没有在ML领域全职工作 那就是通过业余项目

272
00:25:30,760 --> 00:25:33,840
这些可以是你想做的任何事情的想法

273
00:25:34,000 --> 00:25:37,500
它们可以是纸上的重新实现 也可以是你这门课的项目

274
00:25:37,780 --> 00:25:44,420
然后，如果你真的想脱颖而出，也许你能做的最令人印象深刻的事情就是证明你可以创造性地思考，对吧?

275
00:25:44,440 --> 00:25:50,500
不要只是复制别人已经做过的事情，而是要能够，你知道，赢得比赛或发表论文。

276
00:25:50,660 --> 00:25:56,210
所以这绝对不是找ML工作的必要条件 但这会让你的简历脱颖而出

277
00:25:56,300 --> 00:26:02,900
所以我们已经讨论了在构建机器学习产品过程中演变的一些不同角色，以及如何考虑为这些角色招聘人员，

278
00:26:02,900 --> 00:26:04,400
或者被聘为这些角色。

279
00:26:04,580 --> 00:26:10,000
接下来我们要讨论的是机器学习团队如何融入到组织其他部分的环境中

280
00:26:10,390 --> 00:26:17,670
由于我们仍然处于采用这项技术的相对早期阶段，因此就构建ML团队的最佳方式而言，还没有真正的共识。

281
00:26:17,830 --> 00:26:26,730
但是今天要介绍的是针对不同安全级别的组织的一些最佳实践的分类，以及他们如何考虑构建他们的机器学习团队。

282
00:26:27,070 --> 00:26:32,370
所以我们可以把这看作是从最不成熟的ML团队到最成熟的ML团队的攀登。

283
00:26:32,750 --> 00:26:37,400
所以山的底部是新生的或特别的ML原型。

284
00:26:37,500 --> 00:26:43,300
所以这看起来是，你知道，你的公司刚刚开始考虑机器学习，还没有人真正做过，

285
00:26:43,300 --> 00:26:48,900
或者，分析团队或某个产品团队可能会在特别的基础上完成一些工作。

286
00:26:49,110 --> 00:26:53,310
而大多数规模较小的中等企业最多属于这一类

287
00:26:53,470 --> 00:26:57,470
但是对于大型组织来说 一些较少的技术仍然属于这一类

288
00:26:57,630 --> 00:27:03,930
所以，在这个阶段的好处是，有很多唾手可得的东西，我经常可以进来帮助解决。

289
00:27:04,140 --> 00:27:10,780
但如果你要在这个阶段进入一个组织工作，缺点是通常很少有对ml项目的支持。

290
00:27:10,900 --> 00:27:13,700
你可能没有任何可以依赖的基础设施，

291
00:27:13,700 --> 00:27:19,900
招聘和留住优秀人才可能会很困难，公司的领导层可能不会真正意识到机器学习的用处。

292
00:27:20,080 --> 00:27:24,060
如果你要在这些组织中担任一个角色 这就是你要考虑的一些事情

293
00:27:24,400 --> 00:27:32,800
一旦公司决定 嘿 这个机器学习的东西是令人兴奋的 是我们应该投资的东西 通常他们会进入机器学习的研发阶段

294
00:27:32,960 --> 00:27:40,840
这看起来就像他们会有一个特定的团队，或者他们的研发组织的一个特定的子集，专注于机器学习。

295
00:27:41,000 --> 00:27:49,770
他们通常会雇佣研究人员或博士，这些人将专注于在内部构建原型，或者可能进行面向外部的研究。

296
00:27:49,930 --> 00:27:59,780
所以一些大型的石油和天然气公司 制造公司 电信公司 几年前就进入了这个阶段 尽管在很多情况下已经离开了这个阶段

297
00:27:59,800 --> 00:28:07,400
现在，如果你要去这些组织工作，其中一个很大的优势是你可以摆脱在研究方面经验不足的问题，

298
00:28:07,400 --> 00:28:12,800
而且由于机器学习团队今天并不会真正承担任何有意义的业务成果的责任，

299
00:28:12,800 --> 00:28:21,200
另一个很大的优势是，这些团队可以处理长期的业务优先事项，并且他们可以专注于尝试获得对组织来说真正重大的胜利。

300
00:28:21,600 --> 00:28:28,800
但如果你想在这个阶段加入一个团队或者组建一个团队，你需要注意的缺点是，

301
00:28:28,800 --> 00:28:35,600
因为机器学习团队在某种程度上被孤立为组织的研发部分，或者是与不同的产品计划分开的一个独立团队。

302
00:28:35,830 --> 00:28:39,350
他们很难获得解决问题所需的数据

303
00:28:39,510 --> 00:28:43,510
在很多情况下 其他业务部门向他们提供数据并不是优先考虑的问题

304
00:28:43,670 --> 00:28:47,990
这个阶段最大的缺点可能是 你知道 它通常不起作用

305
00:28:48,010 --> 00:28:50,970
它通常不会转化为组织的业务价值

306
00:28:51,200 --> 00:28:56,400
所以机器学习团队经常会陷入这个阶段，他们不会在机器学习上投入太多，

307
00:28:56,400 --> 00:29:02,000
机器学习是孤立的，所以他们没有看到强有力的结果，他们也没有理由加倍投入。

308
00:29:02,180 --> 00:29:09,500
机器学习组织的下一个发展通常是将机器学习直接嵌入到业务和产品团队中

309
00:29:09,600 --> 00:29:18,100
所以这看起来就像你在组织中有一些产品团队，有一些机器学习人员和他们的软件或分析团队并肩作战，

310
00:29:18,100 --> 00:29:26,100
这些机器学习团队将直接向工程或技术组织的决策报告，而不是在他们自己的报告部门。

311
00:29:26,300 --> 00:29:35,460
很多科技公司 当他们开始采用机器学习时 很快就进入了这个类别 因为相当敏捷的软件组织和技术超前的组织

312
00:29:35,620 --> 00:29:40,550
很多金融服务公司也倾向于这种模式

313
00:29:40,700 --> 00:29:50,800
这种组织模式的巨大优势是，当这些机器学习团队成功地交付产品时，它几乎总是能够直接转化为商业价值，

314
00:29:50,800 --> 00:29:58,500
因为从事机器学习的人与开发产品或开发机器学习将成为其中一部分的功能的人坐在一起。

315
00:29:58,500 --> 00:30:03,900
这给了他们一个非常紧密的反馈周期，在他们如何使机器学习更好的新想法之间，

316
00:30:03,900 --> 00:30:07,900
如何用机器学习让产品变得更好，成为产品的一部分。

317
00:30:08,100 --> 00:30:12,000
以这种方式构建机器学习的缺点是，通常很难招聘和开发，

318
00:30:12,000 --> 00:30:17,500
真正伟大的ML人，因为伟大的ML人经常想和其他伟大的ML人一起工作。

319
00:30:17,670 --> 00:30:23,830
让这些年轻人获得真正成功所需的资源也很困难

320
00:30:23,990 --> 00:30:33,430
这就是他们需要的基础设施 他们需要的数据 或者他们需要的计算 因为他们没有一个向组织高层报告并寻求帮助的中央团队

321
00:30:33,590 --> 00:30:42,550
这个模型的另一个缺点是，你经常会看到机器学习项目的运行方式之间的冲突，这种迭代过程是高风险的，

322
00:30:42,910 --> 00:30:46,750
以及这些机器学习人员所在的软件团队的组织方式

323
00:30:46,900 --> 00:30:52,400
有时你会看到人们之间的冲突，因为他们团队中的ML人员没有快速发布，

324
00:30:52,400 --> 00:30:55,600
或者不能在他们承诺的时间内完成。

325
00:30:55,830 --> 00:31:00,270
下一个ML组织架构师将涵盖独立的机器学习功能

326
00:31:00,430 --> 00:31:09,310
这看起来就像你在公司里有一个机器学习部门向高层领导汇报 所以他们向CEO或CEO或类似的人汇报

327
00:31:09,470 --> 00:31:18,510
这就是它与机器学习原型的区别，机器学习团队通常，你知道，向组织中更低级的人汇报，通常是外国人，作为一种较小的赌注。

328
00:31:18,530 --> 00:31:22,310
这家公司在机器学习方面下了很大的赌注。

329
00:31:22,400 --> 00:31:26,600
所以通常这也是你开始看到ml pms的原型，

330
00:31:26,600 --> 00:31:34,600
或者与研究人员、机器学习工程师和其他角色一起工作的平台MLPMS，以便交付跨功能产品。

331
00:31:34,830 --> 00:31:36,990
这种模式的最大优势是可以获得资源。

332
00:31:37,150 --> 00:31:44,970
所以 既然你有一个集中的机器学习团队 你通常可以雇佣非常非常有才华的人 并在组织中建立人才密度

333
00:31:45,270 --> 00:31:51,270
你也可以更容易地训练人们 因为你有更多的人坐在一个房间里 或者一起在一个放大室里

334
00:31:51,200 --> 00:31:53,800
在某些情况下，由于你要向高层领导汇报，

335
00:31:53,800 --> 00:32:01,500
与其他原型相比，您通常还可以喜欢Marshal和来自组织其他部分的数据或计算预算的更多资源。

336
00:32:01,750 --> 00:32:10,490
当你有一个集中的组织来投资工具 基础设施 文化和围绕开发机器学习和你的组织的最佳实践时 它会让事情变得容易得多

337
00:32:10,670 --> 00:32:20,350
该模型的最大缺点是它会导致交接，这可能会给您作为ML团队需要运行的过程增加摩擦，以便将模型实际投入生产。

338
00:32:20,510 --> 00:32:23,230
最后一个ML组织原型 最终状态

339
00:32:23,390 --> 00:32:28,890
如果你想在你的组织中以正确的方式构建机器学习，你的目标是成为机器学习第一的组织。

340
00:32:29,100 --> 00:32:34,660
所以这看起来就像你在公司上下都买了机器学习，作为一个公司，你想要投资的东西。

341
00:32:34,820 --> 00:32:41,140
你有一个机器学习部门 负责最具挑战性的长期项目 并投资于集中数据和集中基础设施

342
00:32:41,300 --> 00:32:50,400
但你在每个业务领域都有机器学习方面的专业知识，专注于快速获胜，并与中央机器学习部门合作，转化他们的想法，

343
00:32:50,400 --> 00:32:55,700
他们所做的实现，变成了公司正在构建的产品的实际成果。

344
00:32:55,900 --> 00:33:05,980
所以你会在最大的科技公司中看到这一点 比如谷歌和facebook 以及那些以机器学习为核心指导原则来构建产品的初创公司

345
00:33:06,140 --> 00:33:14,060
如今，越来越多的人开始看到其他四五年前就开始投资机器学习的科技公司，开始越来越接近这个原型。

346
00:33:14,220 --> 00:33:15,580
这种模式有很多优点

347
00:33:15,680 --> 00:33:17,060
你可以很容易地获得数据

348
00:33:17,200 --> 00:33:24,200
招募起来相对容易。最重要的是，在这个原型中，从机器学习中获得价值可能是最容易的，

349
00:33:24,200 --> 00:33:28,200
因为和你一起工作的产品团队了解机器学习。

350
00:33:28,400 --> 00:33:37,200
这种模式唯一的缺点就是困难和昂贵，那些没有这种思维模式的组织需要很长时间才能接受它，

351
00:33:37,200 --> 00:33:43,500
因为你必须招募很多真正优秀的机器学习人员，你需要将机器学习思想从文化上融入到你的组织中。

352
00:33:43,860 --> 00:33:48,280
接下来我们要讨论的是 如果你正在组建一个机器学习团队 你需要做出的一些设计选择

353
00:33:48,440 --> 00:33:51,840
我们会讲到这些是如何取决于你所处的组织原型的

354
00:33:52,000 --> 00:33:54,540
第一个问题是软件工程与研究。

355
00:33:54,890 --> 00:34:00,230
所以在某种程度上，机器学习团队是负责构建软件，还是只负责训练模型?

356
00:34:00,410 --> 00:34:01,890
第二个问题是数据所有权

357
00:34:02,050 --> 00:34:08,250
那么机器学习团队是否也负责创建发布数据 或者他们只是使用来自其他团队的数据

358
00:34:08,410 --> 00:34:15,690
最后一件事是模型所有权，机器学习团队，他们是将模型产品化的人，还是其他团队的责任?

359
00:34:15,850 --> 00:34:27,510
在机器学习研发架构中，通常情况下，您将优先考虑研究而不是软件工程技能，并且机器学习对数据没有任何所有权，或者通常甚至没有自己构建数据管道的技能集。

360
00:34:27,670 --> 00:34:33,770
类似地 他们也不会负责部署模型 特别是 模型很少会进入生产环境

361
00:34:33,830 --> 00:34:35,290
所以这不是什么大问题

362
00:34:35,400 --> 00:34:40,800
嵌入式机器学习团队，通常他们会优先考虑软件工程技能，而不是研究技能，所有研究人员，

363
00:34:40,800 --> 00:34:46,400
即使他们有研究人员，也需要有很强的软件工程技能，因为每个人都需要部署。

364
00:34:46,660 --> 00:34:54,520
MLT通常仍然不拥有数据，因为他们正在与其他组织的数据工程师一起构建数据管道。

365
00:34:54,600 --> 00:35:03,700
但是由于这些类型的组织的期望是每个人都部署，通常ml工程师将拥有他们在ml功能架构师中部署的模型的维护

366
00:35:03,700 --> 00:35:10,200
通常的要求是，你需要拥有一个强大的软件工程、研究和数据技能组合的团队。

367
00:35:10,410 --> 00:35:13,290
所以这里的团队规模开始变大

368
00:35:13,450 --> 00:35:20,170
最少可能是一个数据工程师 一个管理工程师 可能是一个平台工程师或开发工程师 可能是PM

369
00:35:20,330 --> 00:35:25,650
但是这些团队经常要处理很多其他的功能 所以在很多情况下 他们可以得到比这大得多的东西

370
00:35:25,810 --> 00:35:33,630
在许多情况下 在组织中 您会让软件工程师和研究人员在一个团队的环境中更紧密地合作 通常是在阶段

371
00:35:33,930 --> 00:35:41,610
机器学习团队将开始在数据治理讨论中有发言权 他们也可能有一些强大的内部数据工程功能

372
00:35:41,700 --> 00:35:46,300
然后，由于机器学习团队在这个阶段是集中的，他们会把模型交给用户，

373
00:35:46,300 --> 00:35:53,700
但是在很多情况下，他们仍然要负责维护它们，尽管这条线很模糊，很多组织都在运行这个模型。

374
00:35:53,930 --> 00:35:57,550
最后 在ml-1组织中 没有真正的标准化

375
00:35:57,770 --> 00:36:03,390
团队是如何以研究为导向的 但研究团队确实倾向于与我们的软件工程非常接近

376
00:36:03,500 --> 00:36:09,500
团队完成任务。在某些情况下，机器学习团队实际上拥有整个公司的数据基础设施，

377
00:36:09,500 --> 00:36:17,700
因为ML是公司的核心赌注，所以ML团队就如何组织数据做出一些主要决定是有意义的。

378
00:36:17,900 --> 00:36:23,300
最后，如果机器学习团队是真正构建模型的人，他们通常会把它交给用户，

379
00:36:23,300 --> 00:36:28,600
因为他们有基本的机器学习技能和知识来做这件事，他们实际上是维护模型的人。

380
00:36:28,820 --> 00:36:31,420
如果你想看的话 所有这些都在一张幻灯片上

381
00:36:31,500 --> 00:36:35,000
好了，我们已经讨论了机器学习团队和组织，以及它们是如何走到一起的，

382
00:36:35,000 --> 00:36:38,800
接下来他们要讨论的是机器学习的团队管理和产品管理。

383
00:36:39,020 --> 00:36:43,460
所以关于机器学习的产品管理和团队管理，你要知道的第一件事是，它往往非常具有挑战性。

384
00:36:43,620 --> 00:36:44,820
这有几个原因

385
00:36:44,980 --> 00:36:48,800
第一个是很难预先判断一件事的难易程度

386
00:36:49,100 --> 00:36:52,200
这是Lucas Buewa博客文章中的一个例子，

387
00:36:52,200 --> 00:37:00,700
他们进行了一场kaggle比赛，在比赛的第一周，他们发现表现最好的模型的准确性有了很大的提高。

388
00:37:00,760 --> 00:37:04,060
他们的准确率在一周内从35提高到70。

389
00:37:04,220 --> 00:37:09,940
他们在想，这太棒了，就像我们要达到95的准确率一样，这个比赛将会取得巨大的成功。

390
00:37:10,100 --> 00:37:16,900
但如果你缩小范围，看看三个月来整个项目的过程，你会发现大部分的准确性提高都是在第一周，

391
00:37:16,900 --> 00:37:19,100
此后的改善只是微不足道的。

392
00:37:19,340 --> 00:37:20,660
这并不是因为缺乏努力

393
00:37:20,820 --> 00:37:25,140
在那段时间里 参与团队的数量仍在迅速增长

394
00:37:25,300 --> 00:37:29,900
所以结果是，在ML中，我们很难提前判断某件事的难易程度

395
00:37:29,900 --> 00:37:35,400
看我们在这个项目上能多快取得进展这样的信号是很容易误导人的。

396
00:37:35,580 --> 00:37:39,910
或者相关的挑战是，ML项目的进展往往是非常非线性的。

397
00:37:40,000 --> 00:37:43,100
因此，项目停滞数周或更长时间是很常见的

398
00:37:43,100 --> 00:37:45,800
因为你的想法根本行不通，

399
00:37:45,800 --> 00:37:52,900
或者因为你遇到了一些不可预见的障碍，没有正确的数据，或者类似的事情，导致你真正陷入困境。

400
00:37:53,000 --> 00:37:59,700
最重要的是，在项目的最初阶段，很难计划和预测项目需要多长时间，

401
00:37:59,700 --> 00:38:04,900
因为目前还不清楚什么方法可以训练一个足够好的模型来解决问题。

402
00:38:05,070 --> 00:38:10,640
所有这些的结果是当你在项目计划阶段估计一个项目的时间 是非常困难的

403
00:38:10,800 --> 00:38:14,560
换句话说 生产模式仍然处于研究和工程之间

404
00:38:14,720 --> 00:38:21,620
管理机器学习团队的另一个挑战是研究和工程组织之间存在文化差距

405
00:38:21,800 --> 00:38:23,720
这些人往往来自不同的背景

406
00:38:23,880 --> 00:38:27,380
他们有不同的训练 他们有不同的价值观 目标和规范

407
00:38:27,590 --> 00:38:34,610
例如 通常情况下 刻板印象 研究人员关心的是新颖性和他们解决问题的方法有多令人兴奋

408
00:38:35,060 --> 00:38:39,780
然而 你知道 再一次 刻板印象 软件工程师通常关心的是 我们让东西工作了吗

409
00:38:39,900 --> 00:38:44,700
在更有害的文化中，这两方面经常会发生冲突，即使它们没有直接冲突，

410
00:38:44,700 --> 00:38:47,700
他们可能并不像他们应该的那样珍惜彼此，

411
00:38:47,700 --> 00:38:55,300
因为双方通常都是必要的，以建立你想要建立的东西，当你管理一个团队作为一个组织的一部分时，情况会变得更糟，

412
00:38:55,300 --> 00:38:59,500
你不仅要负责确保团队做他们应该做的事，

413
00:38:59,500 --> 00:39:06,100
但你也必须设法帮助领导了解你的进展，以及你正在建立的东西的前景。

414
00:39:06,300 --> 00:39:12,970
由于ml是一项新技术 许多领导者和组织 即使是在优秀的技术组织中 也没有真正理解它

415
00:39:13,130 --> 00:39:17,810
接下来 我想谈谈你可以更好地管理机器学习项目的一些方法

416
00:39:17,970 --> 00:39:22,710
我要讲的第一种方法是从概率上做项目规划

417
00:39:23,000 --> 00:39:26,800
通常，当我们考虑软件项目的项目规划时，

418
00:39:26,800 --> 00:39:37,500
我们把它想象成瀑布，你有一组任务，你有这些任务的一组时间估计和这些任务的一组依赖项，你可以一个接一个地计划这些任务。

419
00:39:37,690 --> 00:39:42,850
如果任务G依赖于任务D和F，那么任务G会在任务D和F完成后发生。

420
00:39:43,010 --> 00:39:48,930
如果测试D依赖于任务C，而任务C又依赖于任务A，那么他们会在A和C完成后开始任务D，以此类推。

421
00:39:49,000 --> 00:39:53,400
但在机器学习中，这可能会导致挫败感和错误的时间表，

422
00:39:53,400 --> 00:39:58,900
因为这些项目中的每一个都比在典型的软件项目中有更高的失败机会。

423
00:39:59,130 --> 00:40:03,170
我们最终在openAI做的是按概率做项目规划。

424
00:40:03,300 --> 00:40:08,100
所以与其假设某项任务需要一定的时间，

425
00:40:08,100 --> 00:40:17,400
相反，我们分配概率，让每个任务完成的可能性，并潜在地追求替代任务，使我们能够并行地解锁相同的依赖关系。

426
00:40:17,610 --> 00:40:26,310
在这个例子中，也许任务B和任务C都是解锁任务D的备选方法，所以我们可以同时完成它们。

427
00:40:26,400 --> 00:40:31,600
所以如果我们突然意识到任务C行不通任务B花的时间比我们预期的要长，

428
00:40:31,600 --> 00:40:36,200
然后我们可以适当地调整时间，然后我们可以开始计划下一波任务，

429
00:40:36,200 --> 00:40:39,700
一旦我们知道如何解决我们需要的先决任务。

430
00:40:39,900 --> 00:40:43,600
机器学习项目规划的一个核心领域，

431
00:40:43,600 --> 00:40:51,100
你不应该有任何路径关键的项目基本上是研究，研究项目的失败率非常非常高。

432
00:40:51,260 --> 00:40:53,340
而不是说 这就是

433
00:40:53,540 --> 00:40:55,120
我们要解决这个问题

434
00:40:55,300 --> 00:40:59,660
相反 你应该愿意尝试各种方法来解决这个问题

435
00:40:59,820 --> 00:41:05,620
这并不一定意味着你需要并行地完成它们，但许多优秀的机器学习组织都是这样做的。

436
00:41:05,600 --> 00:41:11,800
考虑这个问题的一种方式是，如果你知道你需要建立一个以前从未在你的组织中建立过的模型，

437
00:41:11,800 --> 00:41:18,100
如果你有一种团队合作的文化，你就可以有一种友好的想法竞争，

438
00:41:18,100 --> 00:41:21,300
而不仅仅是奖励一个正确解决问题的人。

439
00:41:21,500 --> 00:41:28,300
这个想法的另一个推论是，许多机器学习的想法可能会失败，当你在做绩效管理时，

440
00:41:28,300 --> 00:41:31,900
重要的是不要纠结于谁的想法是有效的。

441
00:41:32,140 --> 00:41:37,480
从长远来看 重要的是人们做的事情是有效的 比如经过许多个月或几年的过程

442
00:41:37,740 --> 00:41:42,780
如果你的尝试都没有效果 那么这可能表明你没有尝试正确的事情 你没有有效地排除

443
00:41:42,900 --> 00:41:51,000
但在任何给定的项目中，比如在几周或一个季度的时间轴上，你应该看的是你在项目中的执行情况，

444
00:41:51,000 --> 00:41:54,300
而不是这些项目是否成功。

445
00:41:54,540 --> 00:42:01,580
我在同时雇用研究人员和工程师的组织中看到的一种失败模式是隐性地重视其中一方而不是另一方

446
00:42:01,740 --> 00:42:10,780
因此 思考工程比研究更重要 这可能会导致机器学习方面陷入困境 因为机器学习方面没有得到应有的资源或关注

447
00:42:10,940 --> 00:42:16,940
或者认为研究比工程更重要 这可能会导致创造出实际上没有用的机器学习创新

448
00:42:17,100 --> 00:42:21,740
所以解决这个问题的方法通常是让工程师和研究人员紧密合作

449
00:42:21,900 --> 00:42:30,770
事实上 就像有时不舒服地靠在一起 为同一个项目在同一个代码库上工作 并且理解这些人带来了不同的技能集

450
00:42:30,930 --> 00:42:33,730
成功的另一个关键，我看到的是试图快速取得胜利。

451
00:42:33,800 --> 00:42:40,200
所以，与其试图建立一个完美的模型，然后部署它，试图快速发布一些东西来证明这个东西是可行的，

452
00:42:40,200 --> 00:42:41,700
然后随着时间的推移不断迭代。

453
00:42:41,800 --> 00:42:43,900
然后你要做的最后一件事，

454
00:42:43,900 --> 00:42:55,300
如果你是MLT的产品经理或工程经理，那么你要比你想象的更重视教育组织的其他成员，让他们了解机器学习是如何工作的。

455
00:42:55,540 --> 00:43:03,680
如果您的组织在采用ML方面相对较新 那么我敢打赌 组织中的许多人都不了解其中的一项或多项内容

456
00:43:03,860 --> 00:43:09,540
对于我们来说 就像ML从业者一样 考虑ML在哪些地方可以使用 哪些地方不可以使用是很自然的

457
00:43:09,700 --> 00:43:17,560
但对于很多ML新手技术人员或商业领袖来说 实用的ML可能有点违反直觉

458
00:43:17,700 --> 00:43:23,500
所以他们可能对机器学习项目有一些可行的想法，他们可能会错过一些非常简单的机器学习项目的想法，

459
00:43:23,600 --> 00:43:26,800
不符合他们关于机器学习可以使用什么的心智模型。

460
00:43:27,050 --> 00:43:34,110
与组织其他成员打交道时 另一个常见的摩擦点是让组织其他成员相信你构建的机器学习是有效的

461
00:43:34,300 --> 00:43:40,900
商业领袖和产品团队的人通常使用相同的指标来说服我们作为ML从业者，这个模型是有用的，

462
00:43:40,900 --> 00:43:52,800
不能说服他们，就像只看F1分数或准确性分数并不能告诉他们他们需要知道的东西，即这个模型是否真的解决了他们所希望的业务结果所需要解决的任务。

463
00:43:52,900 --> 00:43:58,500
这种情况经常出现在商业领袖或其他利益相关者身上，

464
00:43:58,500 --> 00:44:05,200
并没有真正意识到机器学习本质上是概率性的，这意味着它在生产中会失败。

465
00:44:05,400 --> 00:44:12,000
所以很多时候，机器学习的工作都是在相同的利益相关者中进行的，这些利益相关者可能是项目开始时的支持者，

466
00:44:12,000 --> 00:44:20,700
不能真正适应这样一个事实，即一旦模型问世，它的用户就会开始看到它在几乎所有情况下所犯的错误。

467
00:44:20,900 --> 00:44:24,800
最后一个常见的失败模式是与组织的其他部分合作

468
00:44:24,800 --> 00:44:32,900
组织的其他部分将ML项目视为其他软件项目，而没有意识到它们需要与其他软件项目不同的管理方式。

469
00:44:33,100 --> 00:44:39,200
我看到的一个特别的问题是，当ML团队的领导层感到沮丧时，

470
00:44:39,200 --> 00:44:44,400
因为他们无法准确地传达项目需要多长时间，

471
00:44:44,400 --> 00:44:52,200
因此，让领导层和其他利益相关者了解机器学习项目的概率性质，对于保持你作为机器学习人员的理智非常重要

472
00:44:52,200 --> 00:45:01,100
如果你想和你的员工分享一些资源，他们可以用这些资源来更多地了解这些项目是如何在实际组织中发挥作用的，

473
00:45:01,100 --> 00:45:08,200
我推荐加州大学伯克利分校商学院彼得比尔的人工智能战略课程，以及谷歌的人工智能指南手册，

474
00:45:08,200 --> 00:45:12,300
这在接下来的课程中也会涉及到很多内容。

475
00:45:12,540 --> 00:45:19,980
我想说的最后一件事是，在组织其他人员学习机器学习方面，我认为机器学习项目经理在实现这种效果方面扮演着最关键的角色之一。

476
00:45:20,140 --> 00:45:29,680
翻转。为了说明这一点，我将对机器学习工程师的两种类型进行类比，并描述我在不同组织中看到的两种机器学习项目经理的原型类型。

477
00:45:29,860 --> 00:45:37,820
一方面，我们有任务机器学习项目经理，比如负责特定产品或大量使用机器学习的特定产品功能的项目经理。

478
00:45:37,980 --> 00:45:43,820
这些人需要有相当专业的ML知识 以及如何将其应用于他们正在从事的特定领域

479
00:45:43,980 --> 00:45:50,820
因此 例如 他们可能是您团队的安全信任产品的PM 或者是您团队的特定推荐产品

480
00:45:50,840 --> 00:45:59,300
这些可能是当今工业中更常见的机器学习项目经理类型，但ml pm的一种新兴类型是平台MLPM。

481
00:45:59,400 --> 00:46:03,500
当你有一个集中的机器学习团队时，平台mlpm开始变得有意义，

482
00:46:03,500 --> 00:46:13,000
这个集中的机器学习团队需要在教育组织的其他成员方面发挥一定的作用，让他们知道机器学习在组织正在构建的所有产品中的有效用途，

483
00:46:13,000 --> 00:46:18,600
因为这些人负责管理ML团队内外的工作流程。

484
00:46:18,800 --> 00:46:24,400
因此，帮助过滤掉那些对业务来说不是高优先级的项目，或者不能很好地使用机器学习，

485
00:46:24,400 --> 00:46:29,400
帮助那些可能对产品或公司产生重大影响的高效项目。

486
00:46:29,600 --> 00:46:37,800
通过花大量时间与组织其他部门的项目经理交流，并将这些优先级传达给机器学习团队，并向外传达给组织的其他部门，

487
00:46:37,800 --> 00:46:48,500
这需要对机器学习有广泛的了解，因为这个角色需要做的很多事情是试图真正理解机器学习在组织所做的所有事情中可以、应该和不应该应用在哪里，

488
00:46:48,500 --> 00:46:55,800
平台MLT项目经理可以发挥的其他关键作用是在组织的其他部门传播ML知识和文化，

489
00:46:55,800 --> 00:47:01,800
不只是去找项目管理系统和其他产品功能的业务利益相关者，从他们那里收集需求，

490
00:47:01,800 --> 00:47:09,000
同时也帮助他们了解机器学习的可能性，帮助他们想出一些想法，在他们觉得有趣的责任领域使用机器学习，

491
00:47:09,000 --> 00:47:17,000
这样他们就可以，随着时间的推移，真正开始建立他们自己的直觉，关于他们应该考虑用ml做什么类型的事情。

492
00:47:17,200 --> 00:47:22,600
这些平台的另一个关键作用是降低风险，你知道，

493
00:47:22,600 --> 00:47:31,400
我们已经建立了一个模型，但我们无法说服组织的其他成员真正使用它，因为我们真的需要它来满足哪些要求，

494
00:47:31,400 --> 00:47:42,300
然后主动地与其他需要了解模型性能的人进行沟通，帮助他们了解他们需要了解的关于模型的所有事情，从而真正信任模型的性能。

495
00:47:42,490 --> 00:47:50,450
因此，我认为平台ml pm是ml组织中的一个新趋势，但我认为它可以对ml组织的成功产生重大影响。

496
00:47:50,610 --> 00:47:57,910
当您处于开始建立集中式MLT的阶段时 更多的是从集中式MLT过渡到成为ml第一组织

497
00:47:58,130 --> 00:48:07,140
关于机器学习产品管理，我经常涉及的一个问题是，敏捷或任何这些已建立的机器学习软件开发方法的等同物是什么?

498
00:48:07,300 --> 00:48:12,740
是否有类似的东西 我们只是从货架上取下并应用并交付成功的ML产品

499
00:48:12,900 --> 00:48:17,160
答案是 在方法论上有几个新兴的ML项目大厦

500
00:48:17,420 --> 00:48:26,100
第一种是CRISP-DM，这实际上是一种较老的方法，但它最初专注于数据挖掘，随后被应用于ML中的数据科学。

501
00:48:26,260 --> 00:48:30,540
第二个是微软的团队数据科学流程TDSP。

502
00:48:30,700 --> 00:48:36,000
这两者的共同之处在于，它们都将ML项目的各个阶段描述为一种循环

503
00:48:36,000 --> 00:48:44,200
你首先要理解你想要解决的问题，获取数据，建立模型，评估它，然后最终部署它。

504
00:48:44,450 --> 00:48:54,010
所以使用这些方法的主要原因是如果你真的想要标准化你所说的项目生命周期的不同阶段

505
00:48:54,030 --> 00:48:57,610
如果你在这两者之间做出选择 TDSP往往更有条理

506
00:48:57,770 --> 00:49:04,590
它提供了更细粒度的角色 职责和模板列表 你可以用它们来实际执行

507
00:49:04,950 --> 00:49:06,890
Crisp-DM的级别稍高一些。

508
00:49:07,050 --> 00:49:11,890
所以，如果你需要一个实际的，比如细粒度的项目度量框架，那么我会从尝试TDSP开始。

509
00:49:12,000 --> 00:49:17,300
但我想说，更一般地说，如果你真的有大规模的协调问题，使用这些是合理的，

510
00:49:17,300 --> 00:49:21,300
如果你想让一个大型机器学习团队第一次成功地合作。

511
00:49:21,490 --> 00:49:29,170
但我建议跳过这些 因为它们更关注传统的数据挖掘或数据科学过程 它们可能会减慢你的速度

512
00:49:29,330 --> 00:49:34,090
所以在全面实施这些方法之前我要谨慎行事

513
00:49:34,250 --> 00:49:39,370
我想说的最后一件事是设计出能够很好地由机器学习驱动的产品

514
00:49:39,530 --> 00:49:49,250
所以我认为 这样做的根本挑战是 当用户最终使用人工智能产品时 他们的期望与他们实际得到的之间存在差距

515
00:49:49,410 --> 00:49:57,850
所以当用户得到一个人工智能产品时 他们的思维模式通常是人类智能 但更好的是硅

516
00:49:58,010 --> 00:50:03,250
所以他们认为它通过阅读整个互联网获得了对世界的了解

517
00:50:03,410 --> 00:50:10,690
他们经常认为这个产品比我更了解我自己 因为这是我与软件的每一次互动中关于我的所有数据

518
00:50:10,850 --> 00:50:16,290
他们认为人工智能驱动的产品会从错误中吸取教训，并归纳出新的问题，对吗?

519
00:50:16,450 --> 00:50:20,710
因为它是智能的 它能够从新的例子中学习来解决新的任务

520
00:50:20,890 --> 00:50:28,490
但我认为一个更好的心智模型是你训练一只狗来解决一个谜题 对吧

521
00:50:28,510 --> 00:50:33,730
所以它能解决这个谜题是很神奇的 而且它能解决非常难的谜题

522
00:50:33,890 --> 00:50:36,370
但说到底 这只是一只狗在解谜

523
00:50:36,530 --> 00:50:38,530
特别是 狗是非常小的家伙

524
00:50:38,690 --> 00:50:45,010
他们往往会以奇怪和意想不到的方式失败 你知道 作为像人类一样聪明的人 我们可能不会预料到

525
00:50:45,170 --> 00:50:47,010
他们也很容易分心 对吧

526
00:50:47,170 --> 00:50:52,350
比如 如果你把他们带到外面 他们可能无法解决他们在里面能解决的同样的问题

527
00:50:52,510 --> 00:50:54,710
它们不能泛化到一个狭窄的领域之外

528
00:50:54,870 --> 00:51:03,870
刻板印象是 你不能教老狗新把戏 在ML中 通常很难将一般知识应用于新任务或新环境

529
00:51:04,240 --> 00:51:07,720
狗很擅长学习技巧 但如果你不给它们吃的 它们就学不会

530
00:51:07,880 --> 00:51:16,650
同样 如果没有反馈或奖励来帮助理解哪里表现良好 哪里表现不佳 机器学习系统也不会学习得很好

531
00:51:16,810 --> 00:51:23,110
最后 狗狗学习技巧和机器学习系统都可能在无人看管的情况下表现不佳

532
00:51:23,340 --> 00:51:29,930
这意味着 用户对机器学习产品的心理模型和他们从机器学习产品中实际得到的东西之间存在着很大的差距

533
00:51:30,090 --> 00:51:36,530
所以结论是，好的ml产品设计的目标是在用户的期望和现实之间架起一座桥梁。

534
00:51:36,690 --> 00:51:43,310
有几个组件 第一是帮助用户了解他们实际上从模型中得到了什么 以及它的局限性

535
00:51:43,490 --> 00:51:53,430
第二点是，由于失败是不可避免的，我们需要能够优雅地处理这些失败，这意味着不要过度依赖自动化，并能够在许多情况下退回到太过人为的循环中。

536
00:51:53,590 --> 00:52:01,650
机器学习产品设计的最终目标是建立反馈循环 帮助我们使用来自用户的数据来改进系统

537
00:52:01,810 --> 00:52:08,530
机器学习产品设计的最佳实践之一是向用户解释系统的优点和局限性。

538
00:52:08,690 --> 00:52:20,810
你可以这么做的一种方法是 因为用户往往对人工智能能做什么和不能做什么有误解 把重点放在产品实际为用户解决的问题上 而不是它是人工智能的力量

539
00:52:20,900 --> 00:52:25,600
同样的，你创造的产品体验越开放，越人性化，

540
00:52:25,600 --> 00:52:35,400
比如允许用户输入他们想要的任何信息，或者用他们想要的任何自然语言提问，他们就越会像对待人类一样对待它。

541
00:52:35,570 --> 00:52:39,170
揭露一些系统仍然存在的故障模式。

542
00:52:39,300 --> 00:52:42,700
其中一个例子是当亚马逊ALEXA首次发布时，

543
00:52:42,700 --> 00:52:50,000
他们做出的一个有争议的决定是，他们限制了一组非常具体的提示，你可以对它说，

544
00:52:50,000 --> 00:53:01,200
而不是让它成为一个开放式的语言或对话系统，这使他们能够真正专注于训练用户以一种它可能能够理解的方式与系统交互。

545
00:53:01,410 --> 00:53:11,050
最后，现实是你的模型有限制，所以你应该向用户解释这些限制，并考虑把这些限制作为护栏放入模型中。

546
00:53:11,210 --> 00:53:16,090
不让你的用户提供输入给你的模型 你知道模型不会表现得很好

547
00:53:16,200 --> 00:53:18,500
这可以很简单，你知道，

548
00:53:18,500 --> 00:53:26,100
如果你的NLP系统被设计成在英语文本上表现良好，然后检测用户是否输入文本和其他语言，

549
00:53:26,100 --> 00:53:32,600
要么警告他们，要么不允许他们输入你的模型不能很好地运行的语言文本，

550
00:53:32,600 --> 00:53:40,400
机器学习产品设计的下一个最佳实践是不要过度依赖自动化，而是尝试在可能的情况下为人类设计。

551
00:53:40,600 --> 00:53:44,150
自动化是伟大的 但是陈旧的自动化可能比没有自动化更糟糕

552
00:53:44,300 --> 00:53:48,500
所以值得思考的是，即使你知道用户的正确答案是什么，

553
00:53:48,500 --> 00:53:52,400
你如何添加低摩擦的方法来让用户确认模型的预测，

554
00:53:52,400 --> 00:53:57,800
这样他们就不会有糟糕的经历当模型出了问题，他们没有办法修复它?

555
00:53:57,990 --> 00:54:05,670
这方面的一个例子是 Facebook有一个自动发布功能 可以识别你的脸和照片 并提示这个人是谁

556
00:54:05,800 --> 00:54:08,200
他们不只是把标签分配到脸上，尽管他们几乎总是确切地知道那个人是谁，

557
00:54:08,300 --> 00:54:16,200
因为如果你突然被标记在别人的照片里，那将是一次非常糟糕的经历。

558
00:54:16,550 --> 00:54:22,120
相反 他们只是简单地加上 是的 知道  让你确认他们实际上正确地预测了这是你的脸

559
00:54:22,280 --> 00:54:28,920
为了减轻模型不可避免地做出错误预测的影响 这里有一些模式可以提供帮助

560
00:54:29,000 --> 00:54:34,400
第一，总是以某种方式让用户控制系统是一个很好的主意，

561
00:54:34,400 --> 00:54:40,000
就像自动驾驶汽车一样，如果汽车出了差错，它就能抓住方向盘，让汽车回到正轨。

562
00:54:40,200 --> 00:54:46,700
另一种减轻错误预测成本的模式是观察模型对其反应的信心，

563
00:54:46,700 --> 00:54:51,900
也许要谨慎地只显示那些非常自信的用户的回复，

564
00:54:51,900 --> 00:54:58,700
可能会退回到基于规则的系统，或者只是告诉用户你对这个问题没有一个好的答案。

565
00:54:58,900 --> 00:55:03,140
ML产品设计的第三个最佳实践是与用户建立反馈循环

566
00:55:03,300 --> 00:55:06,860
我们来谈谈你可能从用户那里收集到的一些不同类型的反馈

567
00:55:07,020 --> 00:55:12,820
x轴表示利用得到的反馈来改进模型的难易程度

568
00:55:12,980 --> 00:55:17,180
Y轴是收集反馈给用户增加了多少阻力

569
00:55:17,340 --> 00:55:19,420
粗略地说，你可以这样想。

570
00:55:19,580 --> 00:55:26,060
在图表中间的这条线上是你从用户那里收集的隐性反馈，而不需要改变他们的行为。

571
00:55:26,220 --> 00:55:32,110
在图表的右边是你可以直接训练的信号 而不需要人工干预

572
00:55:32,270 --> 00:55:40,190
给你的用户带来最小摩擦的反馈类型是收集关于预测对他们有多有效的间接 隐含的反馈

573
00:55:40,350 --> 00:55:46,490
所以这些是关于用户行为的信号 往往是所有性能的代理 比如 用户是否流失

574
00:55:46,650 --> 00:55:55,330
这些数据非常容易收集 因为它们通常已经在你的产品中使用了 而且它们非常有用 因为它们对应于我们产品的重要结果

575
00:55:55,400 --> 00:55:59,900
使用这些方法的挑战在于，通常很难判断模型是否是原因，

576
00:55:59,900 --> 00:56:05,800
因为这些都是高层次的业务结果可能取决于很多其他因素而不仅仅是模型的预测。

577
00:56:06,000 --> 00:56:11,800
因此，为了从用户那里获得更直接有用的信号，你可以考虑收集直接的隐性反馈，

578
00:56:11,800 --> 00:56:18,700
从产品中收集信号，直接而不是间接地衡量这个预测对用户的有用程度。

579
00:56:18,900 --> 00:56:22,500
例如 如果你给用户推荐 你可以衡量他们是否点击了推荐

580
00:56:22,600 --> 00:56:25,900
或者如果你建议他们发送一封邮件，他们是否发送了那封邮件，

581
00:56:25,900 --> 00:56:29,500
或者他们复制了这个建议，以便在其他应用程序中使用?

582
00:56:29,660 --> 00:56:35,420
通常这些问题的形式是 用户是否在他们正在运行的进程中采取下一步

583
00:56:35,480 --> 00:56:40,140
他们是否接受了你给他们的预测并将其用于他们想要做的任何任务

584
00:56:40,300 --> 00:56:44,500
这种反馈的好处是你可以直接进行训练，

585
00:56:44,500 --> 00:56:50,700
因为它会给你一个信号，告诉你模型做出的哪些预测是真正适合为用户解决任务的。

586
00:56:50,860 --> 00:56:56,220
但挑战在于 并非产品的每个设置都适合收集这种类型的反馈

587
00:56:56,380 --> 00:57:02,580
所以你可能需要重新设计你的产品来收集反馈 就像下面这个 我们想要明确的用户反馈类型

588
00:57:02,740 --> 00:57:07,860
显式反馈是指您直接要求用户提供关于模型性能的反馈

589
00:57:08,000 --> 00:57:13,300
对用户来说，最简单的方法就是给他们一些二元反馈机制，

590
00:57:13,300 --> 00:57:16,500
这就像你产品里的赞或踩的按钮。

591
00:57:16,660 --> 00:57:21,940
这对用户来说很容易 因为它只需要他们点击一个按钮 这可以是一个不错的训练信号

592
00:57:22,100 --> 00:57:30,100
有一些研究和使用这样的信号来指导模型的学习过程 使其更符合用户的偏好

593
00:57:30,260 --> 00:57:33,140
如果你想要更多的信号 而不仅仅是这个预测是好是坏

594
00:57:33,300 --> 00:57:36,780
你也可以让用户帮你对他们给出的反馈进行分类

595
00:57:36,900 --> 00:57:42,700
例如，他们可以将某些预测标记为不正确的、冒犯的、无关的或对我没用的，

596
00:57:42,700 --> 00:57:49,400
你甚至可以将其设置为二进制反馈之后的第二步，这样用户仍然会给你二进制反馈，

597
00:57:49,400 --> 00:57:53,200
即使他们不想花时间对反馈进行分类。

598
00:57:53,390 --> 00:57:59,830
这些信号对调试非常有用 但很难设置成可以直接训练的方式

599
00:57:59,900 --> 00:58:01,200
另一种让你变得更好的方法，

600
00:58:01,200 --> 00:58:06,800
对模型预测的定期反馈是有一些免费的文本输入，用户可以告诉你他们对预测的看法。

601
00:58:06,990 --> 00:58:11,430
这通常体现在您的模型的支持票据或支持请求中

602
00:58:11,500 --> 00:58:16,400
这需要你的用户做大量的工作，作为一个模型开发人员，它可能很难使用，

603
00:58:16,400 --> 00:58:20,400
因为你必须通过这些关于模型预测的非结构化反馈。

604
00:58:20,600 --> 00:58:23,500
然而，如果它在实践中有时很有用，

605
00:58:23,500 --> 00:58:30,300
因为提供这种反馈有很大的摩擦，用户提供的反馈可能是非常高的信号。

606
00:58:30,500 --> 00:58:33,900
在某些情况下，它可以突出显示，比如最高摩擦预测，

607
00:58:33,900 --> 00:58:39,700
因为用户愿意花时间来抱怨最后，用户反馈的黄金标准

608
00:58:39,700 --> 00:58:47,000
在你的产品和用户体验的背景下，如果可能的话，就是让用户纠正你的模型实际做出的预测。

609
00:58:47,240 --> 00:58:50,320
如果你能让用户直接给你贴上标签 那就太好了

610
00:58:50,480 --> 00:58:51,800
那你现在的处境很好

611
00:58:51,900 --> 00:58:55,600
这是考虑这在哪里可行的一种方法

612
00:58:55,600 --> 00:59:03,100
如果你所做的预测对下游的用户在你所构建的产品体验中是有用的，

613
00:59:03,100 --> 00:59:09,100
这对他们复制并在不同的地方使用是否有用，而是对他们在我的应用中使用是否有用?

614
00:59:09,200 --> 00:59:18,800
其中一个例子是一个叫做Greatscope的产品，Sergey带着它有一个模型，当学生提交考试时，

615
00:59:18,800 --> 00:59:26,400
它试图将考试上的手写姓名与学生注册表上的学生姓名相匹配。

616
00:59:26,600 --> 00:59:29,700
现在，如果模型不知道那个学生是谁，

617
00:59:29,700 --> 00:59:36,700
如果它的置信度很低，或者预测错误，那么讲师就可以把它重新分类为正确的名字。

618
00:59:36,800 --> 00:59:42,400
这对他们来说真的很有用，因为他们需要把考试分类给正确的学生，

619
00:59:42,400 --> 00:59:45,500
但这也是模型非常直接的监督信号。

620
00:59:45,750 --> 00:59:47,270
所以这是两全其美的

621
00:59:47,400 --> 00:59:51,400
每当你想在产品中加入明确的反馈时，

622
00:59:51,400 --> 00:59:57,000
值得记住的是，用户并不总是像我们希望的那样无私。

623
00:59:57,190 --> 00:59:59,830
所以你也应该考虑，如何让用户觉得有价值。

624
01:00:00,240 --> 01:00:02,960
花时间给我们反馈

625
01:00:03,120 --> 01:00:10,600
这一点 最充分的证明方法是 正如我们之前所描述的 将收集反馈作为现有用户工作流的一部分

626
01:00:10,700 --> 01:00:16,000
但如果这是不可能的，如果用户提供反馈的目标是使模型更好，

627
01:00:16,000 --> 01:00:19,700
你可以鼓励他们这么做的一种方法就是明确表达出来。

628
01:00:20,150 --> 01:00:22,510
反馈将使他们的用户体验更好

629
01:00:22,670 --> 01:00:31,270
一般来说 你在这里说得越明确 他们给出反馈和他们实际看到产品变得更好之间的时间间隔就越短

630
01:00:31,430 --> 01:00:36,310
这种积极的反馈循环越多 他们就越有可能真的去做

631
01:00:36,470 --> 01:00:42,570
一个很好的例子就是承认用户反馈并自动调整

632
01:00:42,990 --> 01:00:51,310
所以如果你的用户给你反馈说 嘿 我真的很喜欢爬山 那么对反馈的良好回应可能会很好

633
01:00:51,470 --> 01:00:54,150
这是另一个1 2公里就能跑上的地狱

634
01:00:54,310 --> 01:01:00,290
他们会立即看到反馈的结果，并且非常清楚如何使用这些反馈来改善产品体验。

635
01:01:00,450 --> 01:01:06,310
右边的例子不太好，对反馈的回应只是说，谢谢你的反馈。

636
01:01:06,490 --> 01:01:12,770
因为作为一个用户 当我得到反馈时 我无法知道这些反馈是否真的让产品体验变得更好

637
01:01:12,930 --> 01:01:15,810
所以这让我在未来不再想要得到更多的反馈

638
01:01:15,900 --> 01:01:22,400
机器学习产品设计的主要收获是，优秀的机器学习驱动产品和产品体验不仅仅是，

639
01:01:22,400 --> 01:01:26,400
你知道，把现有的产品在两方面都很好，然后在它的基础上，

640
01:01:26,400 --> 01:01:32,000
它们实际上是从零开始设计的，考虑了机器学习和机器学习的特殊性。

641
01:01:32,170 --> 01:01:38,850
其中的一些原因包括 与你的用户可能认为的不同 机器学习不是编码在硅中的超人智能

642
01:01:39,000 --> 01:01:46,200
所以你的产品体验需要帮助用户理解，在你为他们解决的特定问题的背景下，

643
01:01:46,200 --> 01:01:55,000
它还需要帮助他们安全地与这个有故障模式的模型进行交互，人类的回路和护栏围绕着与该模型交互的经验。

644
01:01:55,220 --> 01:01:59,940
最后 伟大的机器学习产品是由伟大的反馈循环驱动的 对吧

645
01:02:00,100 --> 01:02:06,200
因为模型的完美版本并不存在 而且在您部署的模型的第一个版本中当然也不存在

646
01:02:06,300 --> 01:02:09,900
所以当你设计你的产品时，要考虑的一件重要的事情是，

647
01:02:09,900 --> 01:02:14,600
你如何通过收集用户的正确反馈来帮助他们改善产品体验?

648
01:02:14,780 --> 01:02:21,280
这是一个相当年轻且不太成熟的话题 所以如果你想了解更多 我建议你看看这里的一些资源

649
01:02:21,500 --> 01:02:25,200
我们在之前的幻灯片中使用的许多例子都来自这些资源，

650
01:02:25,200 --> 01:02:30,600
特别是，如果你想了解这个领域的基础知识，顶部的谷歌资源是非常好的。

651
01:02:30,810 --> 01:02:37,050
作为这节课的总结 我们讨论了一些不同的话题 这些话题与如何作为一个团队来构建机器学习产品有关

652
01:02:37,210 --> 01:02:38,810
第一个是机器学习角色

653
01:02:38,970 --> 01:02:43,330
这里的要点是生产机器学习涉及到许多不同的技能

654
01:02:43,490 --> 01:02:52,160
机器生产机器学习本质上是跨学科的 所以当你建立机器学习团队时 有很多不同的技能可以帮助你做出贡献

655
01:02:52,300 --> 01:02:57,000
由于人才短缺，尤其是同时擅长软件工程和机器学习的人才，

656
01:02:57,000 --> 01:03:01,700
明确你对这些职位的真正需求是很重要的。

657
01:03:01,700 --> 01:03:12,400
作为一个局外人，很难进入这个领域，我们对如何解决这个问题的主要建议是通过使用项目来建立你对机器学习的认识。

658
01:03:12,580 --> 01:03:16,500
我们讨论的下一件事是机器学习团队如何融入更广泛的组织

659
01:03:16,660 --> 01:03:24,020
我们涵盖了很多不同的原型 我们研究了机器学习团队是如何变得更加独立和跨学科的

660
01:03:24,100 --> 01:03:29,600
接下来，我们谈到了管理机器团队，管理动物团队是很难的，这里没有灵丹妙药，

661
01:03:29,600 --> 01:03:40,300
但我们看到的一件具体的事情是，项目规划可能会帮助减轻一些挑战，即了解完成机器学习项目需要多长时间。

662
01:03:40,470 --> 01:03:43,790
最后 我们在机器学习的背景下讨论产品设计

663
01:03:43,950 --> 01:03:47,330
这里的主要结论是 今天的机器学习系统不是人工智能

664
01:03:47,500 --> 01:03:52,300
它们在很多方面都是有限的，所以确保你的用户理解这一点很重要，

665
01:03:52,300 --> 01:03:57,400
你可以使用你与用户建立的交互来帮助减轻这些限制。

666
01:03:57,640 --> 01:03:59,670
今天就到这里 下周再见
