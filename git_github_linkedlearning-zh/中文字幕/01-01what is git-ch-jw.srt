0
00:00:00,180 --> 00:00:03,280
现在 让我们花一点时间来研究一下Git是什么

1
00:00:03,300 --> 00:00:07,200
Git就是所谓的版本控制或源代码控制系统。

2
00:00:07,300 --> 00:00:11,000
从本质上讲，它允许您管理随着时间推移对文件所做的更改。

3
00:00:11,270 --> 00:00:14,190
使用Git，你基本上就是一个拥有时光机的历史学家。

4
00:00:14,410 --> 00:00:22,620
你负责记录项目的历史，附带的好处是可以在时间中来回跳跃。

5
00:00:22,850 --> 00:00:22,910
但

6
00:00:23,220 --> 00:00:27,040
不像一般的历史学家 你有改写历史的能力

7
00:00:27,000 --> 00:00:34,800
现在您可以保存检查点(称为提交)，并留下关于在每个不同检查点发生的情况的消息。

8
00:00:34,800 --> 00:00:40,700
最好的部分是另一个称为分支的特性，它允许您创建代码的备用版本。

9
00:00:41,070 --> 00:00:44,730
这就像能够为你的项目创造另一种现实

10
00:00:44,990 --> 00:00:50,790
分支是项目的副本 您可以在不更改原始项目的情况下对其进行处理

11
00:00:51,050 --> 00:00:55,790
然后 您可以同步分支 这被称为合并 或者在它们之间来回移动

12
00:00:56,130 --> 00:00:58,590
为了使用GitHub，您将需要一些东西。

13
00:00:58,830 --> 00:01:02,370
首先，当然，你需要从Git网站安装Git。

14
00:01:02,530 --> 00:01:07,410
他们可能已经在你的机器上安装了Git，但最好确保你有最新的版本。

15
00:01:07,570 --> 00:01:09,870
你可以在这里找到Git 他们都在这里

16
00:01:10,170 --> 00:01:15,910
git-scm.com。SCM意思是源代码控制管理。

17
00:01:16,060 --> 00:01:23,660
从这里 您可以简单地为您的机器下载并安装 输入并遵循说明 大多数安装都没有问题

18
00:01:23,910 --> 00:01:32,110
但是，如果您使用的是Windows，其中一个选项是安装一个名为git bash的终端应用程序，它使运行Linux命令变得更容易。

19
00:01:32,530 --> 00:01:34,750
这是大多数人在使用Git时使用的

20
00:01:35,090 --> 00:01:37,810
但是 Windows机器上的命令非常相似

21
00:01:37,970 --> 00:01:43,630
你只需要记住，要列出文件，你在Windows上使用“dir”而不是Linux上的“ls”。

22
00:01:43,850 --> 00:01:46,850
您还需要一个终端来运行命令

23
00:01:47,230 --> 00:01:55,380
现在 如果你用的是Mac电脑 你可以使用电脑自带的终端应用程序 或者另一个终端 比如Windows也可以使用的hyper

24
00:01:55,380 --> 00:01:58,220
这就是我在课程的某些部分会用到的

25
00:01:58,520 --> 00:02:02,280
我也将使用VS Code，这里是你可以得到的地方。

26
00:02:02,500 --> 00:02:08,800
最后，在大多数web项目中，你将使用node.js，它处理大多数web工具，

27
00:02:08,800 --> 00:02:12,700
你可能想去网站下载安装程序。

28
00:02:12,880 --> 00:02:16,550
如果您对这些要求感到满意 那么让我们开始吧
