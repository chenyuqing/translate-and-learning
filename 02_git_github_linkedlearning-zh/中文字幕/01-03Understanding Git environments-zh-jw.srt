0
00:00:00,180 --> 00:00:04,950
现在我们已经创建了第一个命令，让我们深入研究它是如何处理事务的。

1
00:00:05,060 --> 00:00:07,720
如果你看看你得到了什么，当你发布法律命令时，

2
00:00:07,880 --> 00:00:10,460
你应该看到这样的东西。

3
00:00:10,690 --> 00:00:13,430
我们唯一的条目从列出提交散列开始

4
00:00:13,510 --> 00:00:16,150
这是提交的唯一id

5
00:00:16,490 --> 00:00:21,510
在哈希值旁边 get向我们显示头部当前在主分支中

6
00:00:21,980 --> 00:00:24,620
Git使用分支来组织项目。

7
00:00:24,840 --> 00:00:28,060
每个分支都像是项目的另一个现实

8
00:00:28,470 --> 00:00:31,810
头总是指向当前的现实 这被称为分支

9
00:00:32,130 --> 00:00:37,570
这是当前的分支，默认情况下，这个分支叫做main。

10
00:00:37,790 --> 00:00:40,530
但是旧版本的Git使用术语master。

11
00:00:40,610 --> 00:00:44,120
在下一行 您可以看到作者的姓名和电子邮件

12
00:00:44,280 --> 00:00:47,740
它应该和我们用“git config”命令配置的一样。

13
00:00:48,020 --> 00:00:53,780
接下来，它会显示日期、提交操作，最后显示提交文件时所写的消息。

14
00:00:54,100 --> 00:01:03,400
现在，如果我有一台实时机器，我要做的一件事就是确保在开始使用git之前了解不同的git环境和状态。

15
00:01:03,580 --> 00:01:08,500
下一个东西很重要，git有三个地方可以移动文件。

16
00:01:08,840 --> 00:01:10,780
第一是工作环境。

17
00:01:11,040 --> 00:01:14,180
这里的文件看起来与上次提交时的情况类似。

18
00:01:14,400 --> 00:01:20,200
在创建新提交之前 您可以将文件移动到称为staging的临时位置

19
00:01:20,500 --> 00:01:22,600
我们使用“add”命令来完成此操作。

20
00:01:22,980 --> 00:01:26,400
这为您提供了一种将更改排队的方法，直到您准备好提交。

21
00:01:26,750 --> 00:01:29,170
这有点像婚前约会

22
00:01:29,470 --> 00:01:31,810
最后一个环境是提交

23
00:01:31,810 --> 00:01:37,970
使用“git commit”命令移动文件后，将使用新的散列创建一个新的日志条目。

24
00:01:38,050 --> 00:01:41,570
现在 在提交之前 文件可能处于两种主要状态之一

25
00:01:41,600 --> 00:01:49,830
第一个是跟踪文件。这些文件存在于前一个快照中，这是您所做的提交的另一个名称。

26
00:01:49,990 --> 00:01:52,390
未跟踪文件是其他任何东西，例如:

27
00:01:52,550 --> 00:01:54,690
自上次提交后添加的新文件

28
00:01:55,030 --> 00:01:57,950
被跟踪的文件也可以处于多种状态。

29
00:01:58,150 --> 00:02:05,820
未修改意味着自上次提交以来文件没有更改 当然 修改意味着文件已经更改

30
00:02:05,820 --> 00:02:10,900
最后 它们也可以处于登台状态并被列为登台状态

31
00:02:11,060 --> 00:02:13,920
它们已经被移到了登台环境中

32
00:02:13,920 --> 00:02:18,240
你可以通过“git status”命令看看发生了什么。

33
00:02:18,400 --> 00:02:19,820
让我们来看看它是如何工作的

34
00:02:20,340 --> 00:02:24,660
我将清理屏幕并输入“git status”。

35
00:02:24,830 --> 00:02:27,170
你现在可以看到 没有什么新东西

36
00:02:27,230 --> 00:02:29,810
我们没有对任何文件做任何修改

37
00:02:29,970 --> 00:02:33,140
所以我们仍然在分支main上，没有什么要提交的。

38
00:02:33,300 --> 00:02:35,320
所以我们的工作树是干净的

39
00:02:35,620 --> 00:02:38,680
让我们继续对这个“自述”文件做一些修改。

40
00:02:39,120 --> 00:02:42,000
我要把最后一段删掉。

41
00:02:43,200 --> 00:02:52,990
我要保存这个，你会看到我的文件现在有了不同的颜色，并且会再次发出“git status”命令。

42
00:02:52,990 --> 00:03:00,410
现在 第一行向您展示当前的分支 然后接下来的几行告诉您当前环境中发生了什么

43
00:03:00,570 --> 00:03:04,230
它说有一些更改还没有提交

44
00:03:04,450 --> 00:03:07,470
所以他们在他们的工作目录中 但是他们的状态已经改变了

45
00:03:07,770 --> 00:03:09,750
所以现在 我们有两个选择

46
00:03:09,930 --> 00:03:17,210
我们可以使用“add”命令将这些文件移动到暂存，或者我们可以放弃使用restore命令所做的更改。

47
00:03:17,450 --> 00:03:21,490
我们已经使用了“add”命令，所以让我们尝试恢复命令。

48
00:03:21,710 --> 00:03:24,030
现在 有几种方法可以运行它

49
00:03:24,290 --> 00:03:30,890
同样，使用文件名发出“git restore”命令，或者使用句号来恢复当前目录。

50
00:03:31,110 --> 00:03:37,810
它肯定短了很多。您还可以在许多不同的地方看到git checkout period命令的使用。

51
00:03:38,020 --> 00:03:41,880
这是仍在使用的还原命令的旧版本

52
00:03:42,300 --> 00:03:46,680
我认为还原更有意义，因为“checkout”可以以其他方式使用。

53
00:03:46,860 --> 00:03:48,240
让我们回到我们的项目

54
00:03:48,240 --> 00:03:53,460
我将继续清理终端，然后我可以发出git add。

55
00:03:53,760 --> 00:04:01,340
在这里我可以直接输入文件名，比如“readme”。或者我可以使用快捷方式，写上git add period(一个点)。

56
00:04:01,500 --> 00:04:03,520
这将添加当前目录中的所有内容

57
00:04:03,520 --> 00:04:07,620
让我们继续清除它，并执行一个新的git status命令。

58
00:04:08,100 --> 00:04:12,460
现在您可以看到 我们已经在准备提交的阶段中进行了更改

59
00:04:12,720 --> 00:04:21,760
如果我们愿意 我们可以使用带有额外阶段标志的restore命令将它们移出分级命令 您可以将其缩短为大写的s

60
00:04:22,040 --> 00:04:30,740
让我们再做一次

61
00:04:30,800 --> 00:04:34,140
让我们清除这个并执行git status。

62
00:04:34,320 --> 00:04:36,300
现在我们又回到了一分钟前的位置

63
00:04:36,560 --> 00:04:40,840
让我们继续使用git restore来删除我们现在对这个“自述文件”所做的更改。

64
00:04:40,860 --> 00:04:50,230
注意，这些更改回到了原始文件中，这看起来与我们上次提交的内容非常相似。

65
00:04:52,380 --> 00:04:55,420
现在让我们看看添加新文件时会发生什么

66
00:04:57,420 --> 00:05:01,320
我们将继续添加一个名为“notes.md”的文件。

67
00:05:01,480 --> 00:05:03,840
这里会有一些关于我们项目的笔记

68
00:05:03,840 --> 00:05:06,350
让我们转到终端并使用“git status”命令。

69
00:05:06,580 --> 00:05:10,030
看看发生了什么。现在，你会注意到上面写着我们有未追踪的文件。

70
00:05:10,100 --> 00:05:14,300
让我们尝试发出git restore命令，看看会发生什么。

71
00:05:14,300 --> 00:05:21,400
现在注意到它没有对notes文档做任何事情，这是因为git没有对未跟踪的文件做任何事情。

72
00:05:21,590 --> 00:05:25,770
所以如果你想删除笔记，你必须手动删除它。

73
00:05:25,810 --> 00:05:27,650
让我们把它去掉吧

74
00:05:29,050 --> 00:05:33,090
现在我们可以输入，clear并再次git status。

75
00:05:33,250 --> 00:05:36,510
你可以看到 一切看起来都和上次提交时一样

76
00:05:36,930 --> 00:05:45,230
现在 相信我 您需要了解的最重要的事情是不同的环境是如何工作的 以及文件状态和它们各自的作用

77
00:05:45,390 --> 00:05:51,430
当你的项目变得越来越复杂时 这将使你更容易理解正在发生的事情
