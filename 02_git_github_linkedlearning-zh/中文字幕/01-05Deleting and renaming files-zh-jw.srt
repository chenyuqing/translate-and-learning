0
00:00:00,100 --> 00:00:05,620
在处理git项目时，需要重命名、移动或删除某些文件。

1
00:00:05,920 --> 00:00:11,510
git处理这些普通文件操作的方式可能会让人有点困惑，所以让我们来回顾一下。

2
00:00:11,600 --> 00:00:15,500
现在。删除是我们可以执行的不同函数中最简单的。

3
00:00:15,730 --> 00:00:16,730
让我们从这个开始。

4
00:00:16,970 --> 00:00:20,190
有两种方法可以删除Git管理的文件。

5
00:00:20,350 --> 00:00:24,300
现在，第一种方法是显而易见的，就是从文件系统中删除文件。

6
00:00:24,460 --> 00:00:29,340
我们可以在Visual Studio Code中做到这一点，右键单击文件，然后选择并删除。

7
00:00:29,500 --> 00:00:37,110
或者使用这里的快捷方式，你也可以进入操作系统，查看你的文件夹，并以这种方式删除文件。

8
00:00:37,270 --> 00:00:43,610
现在，如果我们执行git状态，您将看到它将删除记录为一个单独的函数。

9
00:00:43,670 --> 00:00:48,470
所以它实际上记录了一个删除 作为你需要添加到staging的东西

10
00:00:48,720 --> 00:00:53,040
现在，如果你愿意，你可以执行git add，然后提交文件。

11
00:00:53,200 --> 00:00:54,650
这是一种方法

12
00:00:54,810 --> 00:00:59,290
现在，您还可以通过发出git restore命令来恢复文件。

13
00:00:59,450 --> 00:01:01,430
这里我们用句号

14
00:01:01,840 --> 00:01:03,100
让我们把这些清理掉

15
00:01:03,260 --> 00:01:05,680
这会让我们回到html的索引

16
00:01:05,840 --> 00:01:07,720
你可以看到 没有什么要提交的

17
00:01:07,880 --> 00:01:11,100
我们有一个工作树 目前是干净的

18
00:01:11,510 --> 00:01:17,730
另一种删除文件的方法是使用git rm命令，然后在要删除的文件中键入它。

19
00:01:18,460 --> 00:01:21,580
现在它删除了文件 但它还做了别的事情

20
00:01:21,840 --> 00:01:23,340
让我们看一下状态

21
00:01:23,500 --> 00:01:28,940
现在 这实际上是删除文件 并自动将该删除移动到暂存

22
00:01:29,160 --> 00:01:31,520
这已经是要提交的了

23
00:01:31,680 --> 00:01:33,460
这就省去了一步

24
00:01:33,680 --> 00:01:37,710
现在，如果我们想撤销这个函数，我们必须把它分成两部分。

25
00:01:37,870 --> 00:01:46,000
我们可以说，git restore。这次我们可以用-stage，或者直接用- S，我们在这里用一个句号（英文符号的点）。

26
00:01:46,160 --> 00:01:48,180
如果愿意，您可以键入文件名。

27
00:01:48,520 --> 00:01:53,060
这将把文件从暂存状态恢复到工作目录。

28
00:01:53,340 --> 00:01:57,060
让我们清理一下，然后输入“git log”，这是个错误。

29
00:01:57,080 --> 00:02:00,040
我们把这个清除掉，然后输入git status。

30
00:02:00,080 --> 00:02:04,060
现在你可以看到文件看起来和一分钟前一样

31
00:02:04,220 --> 00:02:07,820
它被记录为需要添加到暂存中的删除操作。

32
00:02:07,980 --> 00:02:14,280
再一次，我们可以执行git restore，这次没有S标志，只点击这里的句号。

33
00:02:14,660 --> 00:02:16,840
现在，HTML索引又回来了。

34
00:02:17,170 --> 00:02:21,510
让我们把这个清除掉，状态应该是清晰的。

35
00:02:22,830 --> 00:02:29,970
现在，与删除文件类似，您可以用几种不同的方式重命名文件，但是git处理这种情况的方式非常有趣。

36
00:02:30,390 --> 00:02:33,270
因此 您可以简单地重命名操作系统中的东西

37
00:02:33,430 --> 00:02:37,310
我可以在Visual Studio Code中点击一个文件然后给它起一个不同的名字。

38
00:02:37,730 --> 00:02:44,310
如果我做一个git状态，你会注意到它把它记录为两个不同的东西。

39
00:02:44,640 --> 00:02:52,300
它记录了html索引的删除，然后添加了一个名为home.HTML的新文件。

40
00:02:52,610 --> 00:02:57,270
这是有意义的 这是Linux处理文件的一种方式

41
00:02:57,610 --> 00:03:02,640
当你重命名一些东西时，你所做的就是创建一个新文件，然后删除旧文件。

42
00:03:02,680 --> 00:03:05,540
现在 撤销这个会有点困难

43
00:03:05,700 --> 00:03:11,180
您可以卸载这两个文件，但是在某些时候，git会尝试保留这两个文件的两个副本。

44
00:03:11,340 --> 00:03:13,460
我们来做一下

45
00:03:13,620 --> 00:03:16,760
我们将尝试执行“git restore .”。

46
00:03:17,640 --> 00:03:22,710
我们把这个擦掉。您将看到HTML中的索引重新出现git status。

47
00:03:22,790 --> 00:03:33,540
你可以看到现在这里还有home 所以我们要做的就是删除它 现在看起来和之前一样

48
00:03:34,540 --> 00:03:39,100
让我们清除这个，再次git status，没有什么要提交的。

49
00:03:39,110 --> 00:03:41,950
我们回去把这个也清除掉

50
00:03:42,210 --> 00:03:47,550
现在 就像删除命令一样 我们有一个命令来处理重命名 但它有点奇怪

51
00:03:47,830 --> 00:03:56,690
它叫git mv。然后我们可以给它我们想要重命名的文件的名字，以及之后的新名字。

52
00:03:57,220 --> 00:04:06,550
你可以看到HTML文件的索引被改成了home HTML，我们可以执行git status来看看是什么样子。

53
00:04:06,710 --> 00:04:14,070
所以你可以看到，这又一次节省了存放文件的步骤，它直接变成了我们可以提交的东西。

54
00:04:14,230 --> 00:04:18,330
现在要做这个就必须用和删除时一样的方法。

55
00:04:18,490 --> 00:04:28,900
但是既然我们可以像这样重命名文件，我们也可以倒着输入mv，然后把我们在这里输入的内容反过来。

56
00:04:28,920 --> 00:04:35,210
我们可以说，重命名home。html到index。html。

57
00:04:35,370 --> 00:04:41,930
所以git mv，然后把文件的名字倒过来，现在这个就是index。html。

58
00:04:42,310 --> 00:04:43,890
如果我们这样做了，git status。

59
00:04:43,930 --> 00:04:46,130
上面说没有什么可承诺的。

60
00:04:46,360 --> 00:04:53,380
我认为你必须记住，git总是根据上次提交查看你在做什么。

61
00:04:53,500 --> 00:04:56,600
既然我们把文件重命名为原来的样子，

62
00:04:56,600 --> 00:05:02,600
它将我们所做的一切与上次提交进行比较，并意识到没有什么不同。

63
00:05:02,770 --> 00:05:04,270
这就是为什么它告诉你

64
00:05:04,500 --> 00:05:06,200
没有什么可提交的。

65
00:05:06,200 --> 00:05:09,900
换句话说，实际上没有对任何文件进行任何更改。

66
00:05:09,910 --> 00:05:14,030
现在，您可能想知道为什么是mv而不是rm或rename

67
00:05:14,210 --> 00:05:17,030
或者类似的东西 听起来不像rename

68
00:05:17,190 --> 00:05:21,970
在Linux中。Mv是一个移动文件的命令，您可以使用它来重命名文件。

69
00:05:22,270 --> 00:05:22,670
Move所做的事情与重命名文件时Get所做的事情相同，用新名称移动文件，然后删除旧名称。

70
00:05:28,790 --> 00:05:33,950
现在，git mv确实使返回变得更容易，只要将文件移回来就可以了。

71
00:05:34,130 --> 00:05:41,940
但是 我不断地用操作系统删除文件 或者只是通过重命名来删除文件

72
00:05:42,360 --> 00:05:47,040
当我学习git时，最困惑的是我的文件怎么了。

73
00:05:47,200 --> 00:05:50,140
它做了所有这些奇怪的事情 就像你在这里看到的

74
00:05:50,410 --> 00:05:53,270
通过练习来适应它们是很好的

75
00:05:53,530 --> 00:05:58,630
在学习查看正在发生的事情时，尽可能多地使用git status是个好主意。

76
00:05:58,820 --> 00:06:04,720
确保你花一些时间练习命令 特别是删除东西 重命名和移动东西

77
00:06:05,140 --> 00:06:08,750
否则，在你习惯它之前，git会让你很困惑。
