0
00:00:00,180 --> 00:00:03,200
让我们来看看如何设置一个项目来使用Git。

1
00:00:03,360 --> 00:00:06,230
现在 第一步是设置一些配置变量

2
00:00:06,970 --> 00:00:10,010
Git是为多人使用而设计的。

3
00:00:10,050 --> 00:00:14,770
你必须告诉它你是谁 这样它就会把你所做的改变归功于你

4
00:00:14,920 --> 00:00:16,820
可以使用git config命令

5
00:00:16,880 --> 00:00:20,640
并设置用户名和用户电子邮件

6
00:00:20,980 --> 00:00:22,910
如果你已经有了github账户

7
00:00:23,110 --> 00:00:29,070
你可能想在这里使用你的github电子邮件地址 这样你就可以在github上获得信用以及全局选项

8
00:00:29,230 --> 00:00:33,570
确保这台计算机中的每个项目都使用相同的名称和电子邮件地址

9
00:00:33,720 --> 00:00:35,740
这里有一个终端打开了。

10
00:00:35,900 --> 00:00:39,060
你可以在Mac上使用hyper或者在PC上使用git bash。

11
00:00:39,220 --> 00:00:52,390
我将从添加这些配置变量开始，输入带有全局选项的git config，然后输入user。name，然后输入我的名字。

12
00:00:54,630 --> 00:00:57,030
接下来 我将输入我的电子邮件地址

13
00:01:08,220 --> 00:01:12,940
一旦您可以确定 下一步是准备将保存项目的文件夹

14
00:01:13,070 --> 00:01:17,630
对于这个项目 我有一个文件夹 里面有一些我想用Git管理的文件

15
00:01:17,630 --> 00:01:24,060
你可以使用自己的文件，但如果你想知道如何得到这些文件，一定要看练习的视频。

16
00:01:24,100 --> 00:01:26,460
让我们打开visual studio代码。

17
00:01:32,660 --> 00:01:36,460
现在，visual studio代码有一个内置的终端供您使用。

18
00:01:36,830 --> 00:01:40,690
您可以进入终端菜单 选择新建终端

19
00:01:41,930 --> 00:01:46,810
这个终端可以使用操作系统中安装的任何东西的不同风格。

20
00:01:46,980 --> 00:01:54,040
我在我的Mac上安装了seashell，所以如果你在PC上，你可能仍然想使用git bash之类的东西。

21
00:01:54,290 --> 00:01:57,330
让我们从使用git init命令开始。

22
00:02:01,730 --> 00:02:04,650
注意 我的项目的颜色改变了

23
00:02:04,730 --> 00:02:08,170
这意味着这个项目现在由Git管理

24
00:02:08,430 --> 00:02:14,200
初始化Git时，它会在项目文件夹中创建一个名为. Git的不可见文件夹。

25
00:02:14,380 --> 00:02:17,860
这就是Git存储项目所有信息的地方

26
00:02:18,020 --> 00:02:22,340
如果您使用的是Linux，可以通过执行“ls -la”命令来查看它。

27
00:02:22,620 --> 00:02:26,580
如果我们把它放大一点，你会看到现在有一个git文件夹。

28
00:02:26,760 --> 00:02:30,930
我们甚至可以通过执行“cd .git”命令切换到该文件夹。

29
00:02:30,930 --> 00:02:34,250
然后我们再执行“ls -la”命令。

30
00:02:34,250 --> 00:02:37,610
它会显示这里的所有文件

31
00:02:37,790 --> 00:02:43,150
它将为我们编写这些文件 并负责跟踪项目正在做的事情

32
00:02:43,530 --> 00:02:47,030
我要用"cd .."将备份切换到前面的目录。

33
00:02:47,370 --> 00:02:49,750
让我们发出一个明确的命令

34
00:02:50,830 --> 00:02:57,750
为了创建一个可以返回的条目，我们必须使用“add”命令将文件添加到暂存环境中。

35
00:02:57,700 --> 00:03:02,700
暂存是一个临时区域，我们可以存储以后要提交的文件，

36
00:03:02,700 --> 00:03:07,400
使用“git add”，然后指定要移动到暂存的文件名。

37
00:03:07,850 --> 00:03:10,350
这个命令有一些可供选择的版本

38
00:03:10,610 --> 00:03:15,070
因此，例如，“——all”标志将添加项目中的所有文件。

39
00:03:15,370 --> 00:03:18,530
它的快捷方式是“-A”。

40
00:03:18,530 --> 00:03:23,930
大多数较长的起床命令通常都有一个快捷方式 即命令的第一个字母

41
00:03:24,260 --> 00:03:28,800
如果有多个具有相同字母的命令 其中一些将被大写 就像这样

42
00:03:28,980 --> 00:03:31,100
还有一种更简短的写法

43
00:03:31,260 --> 00:03:35,420
句号是一个快捷方式 Linux为当前目录 所以我们可以使用它

44
00:03:35,680 --> 00:03:37,580
您会经常看到这个快捷方式

45
00:03:37,860 --> 00:03:40,700
让我们继续并将所有这些文件添加到暂存

46
00:03:43,250 --> 00:03:46,650
注意这里的字母变成了A

47
00:03:47,290 --> 00:03:51,290
该过程的最后一步是使用“commit”命令提交文件。

48
00:03:51,640 --> 00:03:53,840
为此 您总是需要包含一条消息

49
00:03:54,000 --> 00:03:57,020
它可以是一个简短的标签 这样你就可以记住你在做什么

50
00:03:58,900 --> 00:04:04,400
你发出它，得到commit并使用"-m"标志，然后输入像" 1st commit "这样的东西，

51
00:04:04,400 --> 00:04:08,300
或者其他任何能让你记起你在做什么的东西。

52
00:04:08,980 --> 00:04:13,580
这将告诉Ki 这是我们想要为项目跟踪的检查点之一

53
00:04:13,920 --> 00:04:15,940
这样我们可以稍后再讨论

54
00:04:16,360 --> 00:04:20,880
继续 清除这个 验证Git正在跟踪我们所做的事情

55
00:04:21,040 --> 00:04:23,260
我们可以发出“git log”命令。

56
00:04:23,650 --> 00:04:28,370
你可以看到get所做的条目 它正在被跟踪 他们没有get文件夹

57
00:04:28,790 --> 00:04:31,490
你也完成了你的第一次提交 所以恭喜你

58
00:04:31,850 --> 00:04:35,590
我们会在下个视频中看到更多
