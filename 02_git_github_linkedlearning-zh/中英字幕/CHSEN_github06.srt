0
00:00:00,140 --> 00:00:05,620
让我们来谈谈将github上的内容与本地硬盘同步的不同方式
Let's talk about the different ways that we can synchronize what's on github with our local hard drive.

1
00:00:05,700 --> 00:00:09,070
第一种方法是使用git clone命令。
The 1st way that we do this is by using a command called git clone.

2
00:00:09,390 --> 00:00:15,030
Git克隆将获取GitHub存储库的副本并将其放在您的本地硬盘上。
Git clone will take the copy of the GitHub repository and place it on your local hard drive.

3
00:00:15,400 --> 00:00:18,900
如果我们在本地硬盘上已经有了存储库的副本，
If we already have a copy of the repository on our local hard drive,

4
00:00:18,900 --> 00:00:21,000
为了同步github上的信息，
 in order to synchronize the information that is on github, 

5
00:00:21,500 --> 00:00:25,080
我们可以发出一个git fetch命令。
we can issue a git fetch command.

6
00:00:25,300 --> 00:00:28,500
从远程存储库获取下载信息
Fetch downloads information from the remote repository 

7
00:00:28,500 --> 00:00:32,600
并将这些信息带到你的本地回购，这样它就会是最新的。
and brings that information to your local repo so that it's up to date.

8
00:00:32,800 --> 00:00:36,500
现在，它实际上并没有对信息做任何事情，
Now, it doesn't actually do anything with the information, 

9
00:00:36,500 --> 00:00:42,400
但它确实会同步本地驱动器和远程驱动器之间的链接
but it does synchronize the link between what's on your local drive with what is on your remote

10
00:00:42,400 --> 00:00:44,700
最后是pull命令。
 Finally, there is the pull command.

11
00:00:44,940 --> 00:00:52,800
Pull是一种获取的组合 还包括将远程存储库中的数据与本地版本合并
Pull is a combination of doing a fetch, but also merging the data that is in your remote repository with the local version.

12
00:00:52,970 --> 00:00:55,310
让我们继续尝试这些不同的命令
So let's go ahead and try those different commands.

13
00:00:55,490 --> 00:00:58,690
首先 我将尝试克隆一个存储库
1st off, I'm going to try to clone a repository.

14
00:00:58,800 --> 00:01:02,400
要做到这一点，我们需要打开一个终端，
To do that, we're going to need to have a terminal open, 

15
00:01:02,400 --> 00:01:05,000
我要把它放在桌面上，
and I'm going to put this on the desktop, 

16
00:01:05,000 --> 00:01:07,600
那是我存放东西的地方，
which is where I've been storing things, 

17
00:01:07,600 --> 00:01:13,700
我需要发出一个Git clone命令，然后包含我想要克隆的文件的url。
and I need to issue a Git clone command and then include the url of the file that I want to clone.

18
00:01:13,900 --> 00:01:16,500
为此，我们可以登陆网站，
For that, we can go to the website, 

19
00:01:16,500 --> 00:01:21,900
这里是一个按钮调用代码，你可以用它来下载链接。
and right here is a button call code that you can use to download the link.

20
00:01:22,190 --> 00:01:25,450
点击这里 它会复制链接到仓库
So if I click right here, it'll copy the link to the repository.

21
00:01:25,750 --> 00:01:33,940
现在，这个链接实际上只是存储库的url，加上扩展名.git，以防您忘记它。
Now, this link is really just the url of the repository, plus the extension .git, just in case you forget it.

22
00:01:34,100 --> 00:01:40,120
一旦我们有了这个，我们就可以回到我们的终端粘贴我要点击回车。
So once we have that, we can go back into our terminal paste that you are all And I'm gonna hit return.

23
00:01:40,490 --> 00:01:43,410
你可以看到它将所有内容下载到本地硬盘上
And you can see that it downloads everything into our local hard drive.

24
00:01:43,570 --> 00:01:45,550
现在让我们回到桌面
Now let's go back into the desktop.

25
00:01:45,590 --> 00:01:49,390
你可以看到它叫它，不管它叫什么，在github上。
You can see that it called it, whatever it's called, at github.

26
00:01:49,790 --> 00:01:54,110
如果我们打开它，它会有所有在GitHub上的文件。
And if we open it up, it's going to have all the files that are on GitHub .

27
00:01:54,200 --> 00:01:57,000
我们可以在Visual Studio Code中打开它，
And we could open this in something like Visual Studio Code, 

28
00:01:57,000 --> 00:02:01,700
但是我们已经把这个项目下载到桌面上了。
but we already have this project downloaded into our desktop.

29
00:02:01,880 --> 00:02:06,700
在这个文件夹中 可以下载一个项目的多个副本
On this folder, it's okay to download multiple copies of a project.

30
00:02:07,100 --> 00:02:10,200
你刚从GitHub下载的拷贝，
The copy that you've just downloaded from GitHub, 

31
00:02:10,200 --> 00:02:14,400
它实际上是git中存储的最新版本。
it's actually the latest version of what's stored in git of itself.

32
00:02:14,600 --> 00:02:15,700
我们真的不需要这个，
We don't really need this, 

33
00:02:15,700 --> 00:02:19,300
我要把这个放到垃圾桶里，然后打开Visual Studio Code。
so I'm just going to put this on the trash, and I'm going to open Visual Studio Code.

34
00:02:19,460 --> 00:02:22,550
我们应该有我们一直在做的项目
We should have the project that we've been working with here.

35
00:02:22,500 --> 00:02:26,100
如果你看一下Visual Studio Code中的这一节，
If you take a look at this section in Visual Studio Code, 

36
00:02:26,100 --> 00:02:30,800
你会看到我们有主分支和固定的线分支，
you'll see that we have the main branch as well as to fix that line branch, 

37
00:02:30,800 --> 00:02:38,800
这个项目也不知道发生了什么，因为我们在GitHub上过时了。
and there's nothing really else that this project knows about what's happened to this project since we've outdated in GitHub.

38
00:02:39,000 --> 00:02:41,500
所以我可以在这里发出一个git fetch命令，
So I can issue a git fetch command here, 

39
00:02:41,500 --> 00:02:48,200
它会负责查看GitHub上的数据并将其下载到当前项目中。
and it's gonna take care of looking at the data that's on GitHub and download it that into the current project.

40
00:02:48,300 --> 00:02:53,100
如果你还记得的话，我们在github上创建了一个名为Title Change的分支
So if you remember, we created a branch on github called Title Change, a

41
00:02:53,100 --> 00:02:56,800
所以它把那个分支带到了我们的本地存储库。
nd so it brought that branch into our local repository.

42
00:02:56,880 --> 00:03:04,550
点击这里 可以看到这个分支也会出现在标题更改下
So if we click right here, we can see that this branch will also appear in here under title change.

43
00:03:04,710 --> 00:03:08,890
注意它说它在origin/titlechange下
Notice that it says that it's under origin slash title change.

44
00:03:09,200 --> 00:03:11,560
你可以看到这里有一些分支
So you can see that there are some branches up here.

45
00:03:11,720 --> 00:03:14,960
这些是机器上的分支
These are the branches that are on this machines.

46
00:03:15,120 --> 00:03:18,340
然后在github上有一些分支
And then there are some branches that are at Gitub.

47
00:03:18,600 --> 00:03:21,900
这些都在原点下面，这是一个远端名称，
And those are under the origin, which is the remote name, 

48
00:03:21,900 --> 00:03:23,700
然后是分支的名称。
and then the name of the branch.

49
00:03:23,800 --> 00:03:26,500
所以如果我们看一下我们的分支列表，
So if we took a look at our branch list, 

50
00:03:26,500 --> 00:03:30,500
我把它清除掉，然后执行一个git分支命令。
let me clear this out, and I'll do a git branch command.

51
00:03:30,700 --> 00:03:34,000
你会看到它只向我展示了本地的两个分支，
You'll see that it's only showing me the two branches that are here locally, 

52
00:03:34,000 --> 00:03:37,400
但是我可以执行git branch -a命令。
but I can do a git branch -a command.

53
00:03:37,780 --> 00:03:41,520
它会显示所有的分支 包括远程分支
That's going to show me all the branches, including the remote branches.

54
00:03:41,600 --> 00:03:45,300
现在，如果我想检查其中一个分支，最简单的方法是，
Now, if I want to check out one of those branches, the easiest way, 

55
00:03:45,300 --> 00:03:47,000
如果你有Visual Studio Code，
if you have Visual Studio Code, 

56
00:03:47,000 --> 00:03:52,900
就是来到这里，点击任何你想从远程分支导入的分支。
is to just come over here and click on any of the branches that you want to bring in from the remote branch.

57
00:03:53,200 --> 00:03:55,500
所以我可以点击这里，
So I could just click on this right here, 

58
00:03:55,500 --> 00:03:58,900
它会把我切换到标题更改分支，
and it's going to switch me over to that title change branch, 

59
00:03:58,900 --> 00:04:01,000
它会把它带到当地。
and it's going to bring it in locally.

60
00:04:01,210 --> 00:04:03,390
你可以看到它已经在这里了
You can see that it's right here already.

61
00:04:03,700 --> 00:04:06,900
我要切换回主分支，
I'm going to switch back over to the main branch, 

62
00:04:06,900 --> 00:04:09,600
我将发出最后一个命令，
and I'm going to issue the last command, 

63
00:04:09,600 --> 00:04:11,600
也就是git的pull命令，
which is the git pulll command, 

64
00:04:11,600 --> 00:04:14,600
这将会带来所有的变化。
that's going to try to bring in all the changes.

65
00:04:14,800 --> 00:04:18,700
但是由于我创建这个存储库的方式，
But because of the way that I created this repository, 

66
00:04:18,700 --> 00:04:23,800
然后，我建立了一个从主分支到远程分支的上游链接。
I then set up an upstream link from my main branch to my remote branch.

67
00:04:23,990 --> 00:04:30,690
所以我需要复制这个命令 然后粘贴
So I do need to copy this command right here, and I'll paste it.

68
00:04:30,900 --> 00:04:35,500
我想做的是确保我与当地的分支机构联系起来，
And what I want to do is make sure that I tie in my local branch, 

69
00:04:35,500 --> 00:04:39,000
它被称为main，并链接到origin main。
which is called main, and link it to origin main.

70
00:04:39,160 --> 00:04:41,140
这就是我需要执行的命令
So this is the command that I need to execute.

71
00:04:41,640 --> 00:04:47,720
现在，main的本地版本已经下沉到main的远程版本。
Now, the local version of main has been sinked to the remote version of main.

72
00:04:47,990 --> 00:04:50,650
让我们把这个弄清楚，并发出一个git pull。
Let's clear to this out and issue a git pull.

73
00:04:50,900 --> 00:04:56,700
现在，所有在远程版本上的变化都在局部发生了变化，
Now, all the changes that were on the remote version of our sight have been changed locally, 

74
00:04:56,700 --> 00:04:58,800
如果我看一下索引，
so if I take a look at the index, 

75
00:04:58,800 --> 00:05:02,300
你会看到我确实更改了标题。
you'll be able to see that I do have that title change.

76
00:05:02,610 --> 00:05:03,510
现在 我们要做的是
Now, what we want to do is

77
00:05:03,770 --> 00:05:08,950
确保我们将新标题添加到列和媒体文件中
make sure that we add that new title into the columns as well as the media file.

78
00:05:09,200 --> 00:05:12,700
所以我要到这里来，复制这个，
So I'm going to come over here and I'll copy this, 

79
00:05:12,700 --> 00:05:15,300
我将创建一个新的分支，
I'll go ahead and create a new branch, 

80
00:05:15,300 --> 00:05:19,700
只是为了向您展示git flow如何与远程存储库一起工作。
just to show you how git flow will work with a remote repository.

81
00:05:19,850 --> 00:05:28,030
我们将执行git switch - c，然后我将这个命名为othertitlechanges。
So we will do a git switch minus c, and then I'll call this thing othertitlechanges. 

82
00:05:28,500 --> 00:05:30,000
这创建了一个新的分支，
This creates a new branch,

83
00:05:30,000 --> 00:05:35,900
现在我可以进入其他文件，粘贴修改，
 and now I can go into my other files, paste that change, 

84
00:05:35,900 --> 00:05:41,800
保存这个，粘贴修改，保存这个。
I'll save this, and paste that change, and I'll save this.

85
00:05:41,900 --> 00:05:45,300
这些文件现在被修改了。
Those files are now modified. 

86
00:05:45,300 --> 00:05:56,800
我们把这个清除掉，我可以执行git add period和git commit，然后在这里放一条消息。
Let's clear this out, and I can do a git add period and git commit and put in a message right there.

87
00:05:57,210 --> 00:06:07,960
现在我们回到main并合并其他titlechanges。
So now we'll go back into main and will merge othertitlechanges.

88
00:06:09,300 --> 00:06:14,700
好了，现在我要做的是推送我所做的所有更改，
All right, so now what I want to do is push all of the changes that I've done, 

89
00:06:14,700 --> 00:06:17,200
幸运的是，将它们推送到GitHub上。
luckily, and push them onto GitHub.

90
00:06:17,300 --> 00:06:23,800
我可以做git push它会推送我在本地做的更改，
So I can do a git push now that's gonna push the changes that I've made locally, 

91
00:06:23,800 --> 00:06:26,100
但只对主要的分支。
but only to the main branch.

92
00:06:26,200 --> 00:06:29,100
你也可以用git push - - all，
So you can also do a git push minus minus all, 

93
00:06:29,100 --> 00:06:32,600
如果您想在所有分支中推送所有更改。
if you want to push all the changes in all the branches.

94
00:06:33,830 --> 00:06:36,670
让我们来看看Github上发生了什么。
Let's take a look at what's happened on Github.

95
00:06:37,000 --> 00:06:39,500
我要刷新一下这个页面，
I'm going to refresh this page, 

96
00:06:39,500 --> 00:06:44,300
你会注意到我更改了主分支中的所有内容
and you'll notice that I changed everything in the main branch 

97
00:06:44,300 --> 00:06:49,100
并将其他标题更改添加到我们的分支列表中。
as well as added this other title changes into our branch list.

98
00:06:49,440 --> 00:06:55,350
现在，我可以只推othertitlechanges分支，然后创建一个拉取请求。
Now, I could have just push the othertitlechanges branch and then created a pull request.

99
00:06:55,990 --> 00:07:01,670
这将工作 但变化是如此之小 我只是照顾它在主要分支以及
That will work, but the change was so little that I just took care of it in the main branch as well.

100
00:07:01,900 --> 00:07:04,760
现在让我们来看看这个问题
So let's take a look at this issue Now.

101
00:07:04,920 --> 00:07:08,340
接下来 我要结束这个项目
Next, I'm going to go to the project to sort of close this project out.

102
00:07:08,720 --> 00:07:10,180
我会打开第一个版本。
I'll open up first release.

103
00:07:10,600 --> 00:07:14,540
我要做的是把这个移到完成选项卡。
And what I'll do is move this over to the Done tab.

104
00:07:15,640 --> 00:07:24,300
如果我想的话 我可以点击这里看看这里的问题
And if I want to, I can click on this right here and take a look at the issue over here.

105
00:07:24,400 --> 00:07:28,300
所以这个问题可以直接从我的项目栏中解决，
So this issue can be closed directly from my project bar,

106
00:07:28,300 --> 00:07:34,700
但在问题页上看更容易一些，我要发表评论。
 but it's a little bit easier to see it all on the issues page, and I'm gonna make a comment.

107
00:07:39,000 --> 00:07:47,560
我可以在这里输入签名，调出我项目中的名字列表，让特里知道。
And I can actually type in the atsign here to pull up a list of names in my project and let Terry will know.

108
00:07:47,600 --> 00:07:52,500
特里会收到一条信息，是一封电子邮件，
Terry will get a message, which will be an email, 

109
00:07:52,500 --> 00:07:58,300
然后我会让特里知道改变已经发生了
and then I'll let Terry know that the changes happen made, 

110
00:07:58,300 --> 00:08:03,400
我将用这句话来结束这个问题。
and I'm going to close this issue with this comment.

111
00:08:03,400 --> 00:08:07,100
现在我们有了我们在这里所做的一切的历史，
So now we've got a history of everything that we've done here, 

112
00:08:07,100 --> 00:08:11,600
一直到关闭这个问题，这意味着这个问题已经解决了。
all the way down to closing the issue, which means this issue has been fixed.

113
00:08:11,700 --> 00:08:13,000
如果我们再回到项目，
If we go to projects again, 

114
00:08:13,000 --> 00:08:17,600
你可以看到这里的一切看起来都很好。
you can see that everything looks great here.

115
00:08:18,000 --> 00:08:22,000
如果我想，我可以存档它，它会把它从待办事项列表中删除，
And if I want to, I can archive this, and it'll remove it from the list of to-dos,

116
00:08:22,000 --> 00:08:26,300
这是你时不时想做的事。
 which is something you want to do every now and then.

117
00:08:26,900 --> 00:08:28,700
你也可以看到这个问题，
You can see that the issue also, 

118
00:08:28,700 --> 00:08:31,800
因为它很接近，所以它不再在这里的列表上。
since it's been close, it's no longer on the list here.

119
00:08:32,000 --> 00:08:36,900
如果我想的话，我仍然可以通过封闭问题来找到它，
I can still find it if I want to by filtering by just closed issues,

120
00:08:36,900 --> 00:08:39,700
或者其他我想听的方式
or in any other way that I want to hear.

121
00:08:39,770 --> 00:08:45,410
对吧 最后我要做的就是为这个项目创建一个release
Right? So the final thing that I could do is create a release here for this project.

122
00:08:45,800 --> 00:08:48,800
看起来现在还没有发布，
It looks like releases aren't showing right now, 

123
00:08:48,800 --> 00:08:53,800
你可以到这里，然后确保你打开了发布功能。
so you can go right here, and then make sure that you turn on the release feature.

124
00:08:54,040 --> 00:08:58,940
所以发布就像是你网站的正式版本
So release is like an official version of your website.

125
00:08:59,160 --> 00:09:06,660
你做发布的原因是你想让人们看到你视野的特定版本
The reason you do releases is because you want people to have access to a specific version of your sight.

126
00:09:06,800 --> 00:09:09,000
你的存储库会一直在变化，
Your repository is going to change all the time, 

127
00:09:09,000 --> 00:09:13,100
你希望人们回到任何一个特定的版本，
and you want people to come back to any specific version, 

128
00:09:13,100 --> 00:09:16,400
所以如果他们在项目中使用它，
so that if they're using it on their project, 

129
00:09:16,400 --> 00:09:19,700
他们总是可以使用那个版本。
they can always have that version to work with.

130
00:09:20,000 --> 00:09:22,100
现在我把它加回来了，
So now that I've added that back, 

131
00:09:22,100 --> 00:09:26,400
我可以创建一个新版本，然后给它一个版本。
I can go to create a new release, and I can give this thing a version.

132
00:09:26,620 --> 00:09:34,560
当给它一个v1.0.0时，通常在网络上的版本有三个数字。
When give it a v1.0.0, usually versions on the web have three digits.

133
00:09:34,700 --> 00:09:36,600
这是一个主版本。
This is a main release. 

134
00:09:36,600 --> 00:09:41,800
这是一个子版本，这是一个非常小的版本。
This is sort of a sub release, and this is a very minor release.

135
00:09:41,880 --> 00:09:44,080
这有点像买来的修复
So this is sort of like bought fixes.

136
00:09:44,300 --> 00:09:50,600
下一个是任何会破坏原始版本的变化，
And then the next one is any change that would break some things in the original release, 

137
00:09:50,600 --> 00:09:56,100
然后一个新的版本，比如第二个版本，将是一个全新的版本。
and then a new version, like a version two, would be a completely new version.

138
00:09:56,160 --> 00:10:00,340
所以这个版本的目标将是发生在主分支中的任何东西
So the target of this release is going to be whatever happens to be in the main branch.

139
00:10:00,500 --> 00:10:03,900
如果我想从这里开始，我可以选择其他分支，
I could choose some other branches if I want to from here, 

140
00:10:03,900 --> 00:10:08,100
然后我会给它一个发布标题，我就叫它first release。
and then I'm gonna give this the release title, and I'll just call it first release. 

141
00:10:08,360 --> 00:10:14,140
如果我想的话，我可以在这里写一些笔记，但我不需要这样做。
And I can write some notes in here if I want to, but I don't need to do that.

142
00:10:14,140 --> 00:10:15,990
在这里你可以看到更多关于语义版本控制的信息。
And here you can see more information about semantic versioning here. 

143
00:10:16,100 --> 00:10:19,100
你也可以把它做成预发布版，
You can also make this a pre release, 

144
00:10:19,100 --> 00:10:25,600
这意味着你要让人们知道，这还没有准备好生产。
which means you're letting people know that this isn't production ready quite yet.

145
00:10:25,800 --> 00:10:30,230
在这种情况下 你可以把它命名为v 1Alpha
In that case, you might name it something like this v .1 Alpha.

146
00:10:30,300 --> 00:10:32,820
它真的不会被称为版本一
It really wouldn't be called a version one.

147
00:10:33,000 --> 00:10:34,900
但是，如果你想这样做，
Or however, else you want to do this, 

148
00:10:34,900 --> 00:10:37,700
您可以在这里的语义版本控制中阅读这些注释。
you can read this notes over here in semantic versioning.

149
00:10:38,120 --> 00:10:40,840
这不会是一个beta或类似的东西
This isn't going to be a beta or anything like that.

150
00:10:41,000 --> 00:10:43,060
这将是一个正式的发布
It's going to be an official release.

151
00:10:43,300 --> 00:10:45,700
有人说，发布发布。
Someone to say, publish release. 

152
00:10:45,700 --> 00:10:50,700
这给了你一个地方，你可以发布你所有的版本，
And this gives you a place where you can publish all your releases, 

153
00:10:50,700 --> 00:10:59,100
人们可以来这里下载你文件的源代码看看你的代码和状态。
and people can come in here and download the source code for your files and take a look at your code and that state.

154
00:10:59,400 --> 00:11:01,880
这是人们可以经常去的地方
So that's something that people can always go to.

155
00:11:02,000 --> 00:11:06,200
注意，它还为发布创建了一个小分支，
Notice that it also creates a little branch for the release, 

156
00:11:06,200 --> 00:11:13,400
这样，当你发布正式版本时，人们总是可以回到这个版本的代码。
and that way people can always come back into this version of the code when you made the official release.

157
00:11:13,750 --> 00:11:18,930
你可以看到，github非常有用，不仅仅是创建不同版本的视觉。
You can see that github is pretty useful for doing more than just creating different versions of your sight.

158
00:11:19,100 --> 00:11:24,100
所以除了拥有Git的时光机功能，
So in addition to having the capabilities of a time machine with Git, 

159
00:11:24,100 --> 00:11:31,200
Github真的给了你一种方法来创建一个社会环境，人们可以一起合作。
github really gives you a way to create a social environment where people can collaborate together.
